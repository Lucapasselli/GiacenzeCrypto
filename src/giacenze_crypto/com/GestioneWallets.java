/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package giacenze_crypto.com;

import static giacenze_crypto.com.CDC_Grafica.Funzioni_Tabelle_PulisciTabella;
import static giacenze_crypto.com.CDC_Grafica.MappaCryptoWallet;
import static giacenze_crypto.com.CDC_Grafica.Mappa_Wallet;
import static giacenze_crypto.com.Prezzi.MappaWallets;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luca.passelli
 */


public class GestioneWallets extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form GestioneWallets
     */

    
    public boolean TabellaDaAggiornare=false;
    public GestioneWallets() {
        initComponents();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bottone_InserisciWallet = new javax.swing.JButton();
        Bottone_RimuoviWallet = new javax.swing.JButton();
        ScrollPaneTabellaWallets = new javax.swing.JScrollPane();
        TabellaWallets = new javax.swing.JTable();
        Label_IndirizzoWallet = new javax.swing.JLabel();
        Label_Rete = new javax.swing.JLabel();
        TextField_IndirizzoWallet = new javax.swing.JTextField();
        ComboBox_Rete = new javax.swing.JComboBox<>();
        Bottone_Aggiorna = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Bottone_InserisciWallet.setText("Inserisci Wallet");
        Bottone_InserisciWallet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_InserisciWalletActionPerformed(evt);
            }
        });

        Bottone_RimuoviWallet.setText("Rimuovi Wallet Selezionato");
        Bottone_RimuoviWallet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_RimuoviWalletActionPerformed(evt);
            }
        });

        TabellaWallets.setAutoCreateRowSorter(true);
        TabellaWallets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome Wallet", "Indirizo Wallet", "Rete", "<html><center>Data Ultimo Movimento<br>Importato</html>", "Ultimo Blocco"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPaneTabellaWallets.setViewportView(TabellaWallets);
        if (TabellaWallets.getColumnModel().getColumnCount() > 0) {
            TabellaWallets.getColumnModel().getColumn(0).setPreferredWidth(150);
            TabellaWallets.getColumnModel().getColumn(0).setMaxWidth(150);
            TabellaWallets.getColumnModel().getColumn(2).setPreferredWidth(60);
            TabellaWallets.getColumnModel().getColumn(2).setMaxWidth(60);
            TabellaWallets.getColumnModel().getColumn(3).setPreferredWidth(200);
            TabellaWallets.getColumnModel().getColumn(3).setMaxWidth(200);
            TabellaWallets.getColumnModel().getColumn(4).setPreferredWidth(100);
            TabellaWallets.getColumnModel().getColumn(4).setMaxWidth(100);
        }
        TabellaWallets.getTableHeader().setPreferredSize(new Dimension(TabellaWallets.getColumnModel().getTotalColumnWidth(), 48));

        Label_IndirizzoWallet.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_IndirizzoWallet.setText("Indirizzo Wallet :");

        Label_Rete.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_Rete.setText("Rete :");

        ComboBox_Rete.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- nessuna selezione ---", "Binance Smart Chain (BSC)", "Cronos Chain (CRO)" }));

        Bottone_Aggiorna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AggiornaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPaneTabellaWallets)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Label_Rete, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ComboBox_Rete, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(112, 112, 112)
                                .addComponent(Bottone_InserisciWallet, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Label_IndirizzoWallet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TextField_IndirizzoWallet, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bottone_RimuoviWallet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bottone_Aggiorna, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPaneTabellaWallets, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Label_IndirizzoWallet)
                            .addComponent(TextField_IndirizzoWallet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bottone_RimuoviWallet))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Label_Rete)
                            .addComponent(ComboBox_Rete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bottone_InserisciWallet)))
                    .addComponent(Bottone_Aggiorna, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        Bottone_Aggiorna.setText("<html>Scarica nuovi movimenti<br>da tutti i Wallet della lista</html>");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Bottone_InserisciWalletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_InserisciWalletActionPerformed
        // TODO add your handling code here:
        String Wallet=TextField_IndirizzoWallet.getText().trim();
        String Rete=ComboBox_Rete.getItemAt(ComboBox_Rete.getSelectedIndex());
        if (Rete.split("\\(").length>1){
            Rete=Rete.split("\\(")[1].trim().substring(0, Rete.split("\\(")[1].length()-1);
        } else {
        }
        if (Wallet.length()!=42 || !Wallet.substring(1, 2).equalsIgnoreCase("x")){
            //non è un indirizzo di wallet valido
            JOptionPane.showConfirmDialog(this, "Attenzione! \nIl Wallet specificato non è valido",
                            "Wallet non Valido",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
        }else if(ComboBox_Rete.getSelectedIndex()==0){
            //non è valido la selezione della combobox
            JOptionPane.showConfirmDialog(this, "Attenzione! \nDevi selezionare una rete valida",
                            "Rete non valida",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);            
        }else{
            //Se arrivo qui i dati sono corretti adesso devo
            //1 - Controllare se non esiste già un wallet della stessa rete con lo stesso indirizzo
            if (MappaWallets.get(Wallet+"_"+Rete)!=null){
                JOptionPane.showConfirmDialog(this, "Attenzione! \nWallet gia' prensente nella lista",
                            "Wallet gia' presente",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);  
            }
            //2 - Inserisco il wallet nella lista
            else{
                MappaWallets.put(Wallet+"_"+Rete, Wallet+";"+Rete);
                ScriviFileWallets();
                PopolaTabella();
            }
        }
    }//GEN-LAST:event_Bottone_InserisciWalletActionPerformed

    
    private void PopolaTabella(){

        DefaultTableModel ModelloTabellaWallets = (DefaultTableModel) TabellaWallets.getModel();
        Funzioni_Tabelle_PulisciTabella(ModelloTabellaWallets);
        //prima di fare il tutto dovrei scorrere tutti i miei wallet e vedere se trovo corrispondenze con quelli in tabella
        //se così è allora devo cercare la data dell'ultimo movimento e segnarlo nella tabella
        for (String[] v : MappaCryptoWallet.values()) {
            if (v.length>23){
                if (v[23]==null)v[23]="0";
                 Mappa_Wallet.put(v[3], v[1]+";"+v[23]);
            }else{
                 Mappa_Wallet.put(v[3], v[1]+";0");
            }
        }
        for (String riga:MappaWallets.values())
        {
                String splittata[] = riga.split(";");
                String rigaTabella[]=new String[5];
                String w=splittata[0]+" ("+splittata[1]+")";
                rigaTabella[1]=splittata[0];
                rigaTabella[2]=splittata[1];
                if (Mappa_Wallet.get(w)==null){
                    rigaTabella[3]="0";
                    rigaTabella[4]="0";
                }
                else{
                    rigaTabella[3]=Mappa_Wallet.get(w).split(";")[0];
                    rigaTabella[4]=Mappa_Wallet.get(w).split(";")[1];
                }
                    
                ModelloTabellaWallets.addRow(rigaTabella);            
            }

    }
    
    
    
    public void AggiornaWallets() {
        Component c = giacenze_crypto.com.GestioneWallets.this;
        Download progress = new Download();
        progress.setLocationRelativeTo(this);

        Thread thread;
        thread = new Thread() {
            public void run() {
                int i = 0;
                List<String> Portafogli = new ArrayList<>();
                for (String riga : MappaWallets.values()) {
                    String splittata[] = riga.split(";");
                    String blocco = Mappa_Wallet.get(splittata[0] + " (" + splittata[1] + ")");
                    if (blocco != null) {
                        blocco = blocco.split(";")[1];
                    } else {
                        blocco = "0";
                    }

                    if (splittata[1].equalsIgnoreCase("BSC")||splittata[1].equalsIgnoreCase("CRO")) {
                        Portafogli.add(splittata[0] + ";" + blocco+";"+splittata[1]);
                    }
                }
                //Tutte le nuove operazioni trovat vengono messe nella mappaTransazioniDefi
                Map<String, TransazioneDefi> MappaTransazioniDefi = Importazioni.RitornaTransazioniBSC(Portafogli, c, progress);
                if (MappaTransazioniDefi != null) {
                    //Scrivo tutte le nuove transazioni nella mappa principale
                    for (TransazioneDefi v : MappaTransazioniDefi.values()) {
                        for (String[] st : v.RitornaRigheTabella()) {
                            MappaCryptoWallet.put(st[0], st);
                            i++;
                        }
                    }
                 //   Prezzi.ScriviFileConversioneXXXEUR();
                    Importazioni.TransazioniAggiunte = i;
                    if (Importazioni.TransazioniAggiunte != 0) {
                        CDC_Grafica.TabellaCryptodaAggiornare = true;
                    }
                }

                progress.dispose();

            }
        };
        thread.start();
        progress.setVisible(true);
        JOptionPane.showConfirmDialog(c, "Importazione Terminata \nSono stati inseriti " + Importazioni.TransazioniAggiunte + " nuovi movimenti",
                "Importazione Terminata", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
        PopolaTabella();
        c.setCursor(Cursor.getDefaultCursor());

    }
 
        
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        LeggiFileWallets();
        PopolaTabella();
    }//GEN-LAST:event_formWindowOpened

    private void Bottone_RimuoviWalletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_RimuoviWalletActionPerformed
        // TODO add your handling code here:
                if (TabellaWallets.getSelectedRow() >= 0) {
            int rigaselezionata = TabellaWallets.getRowSorter().convertRowIndexToModel(TabellaWallets.getSelectedRow());

            String IDWallet = TabellaWallets.getModel().getValueAt(rigaselezionata, 1).toString();
            if (IDWallet != null) {
                
                 int r= JOptionPane.showConfirmDialog(this, "Attenzione! \nSei sicuro di voler eliminare il wallet \n"
                         + IDWallet+" ?",
                            "Wallet non Valido",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
                 IDWallet=IDWallet+"_"+TabellaWallets.getModel().getValueAt(rigaselezionata, 2).toString();
              //  System.out.println(r);
                if(r==0){
                MappaWallets.remove(IDWallet);
                ScriviFileWallets();
                PopolaTabella();
                String Messaggio = "Il Wallet è stato cancellato \nVuoi cancellare anche tutte le movimentazioni importate finora?";
            r=JOptionPane.showOptionDialog(this, Messaggio, "Cancellazione Transazioni Crypto", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"SI","NO"}, "OK");
           if(r==0){
               //System.out.println(IDWallet.split("_")[0].trim()+" ("+IDWallet.split("_")[1].trim()+")");
             int movEliminati=Funzioni.CancellaMovimentazioniXWallet(IDWallet.split("_")[0].trim()+" ("+IDWallet.split("_")[1].trim()+")");
             if (movEliminati>0){
                 CDC_Grafica.TabellaCryptodaAggiornare=true;
                 Messaggio="Numero movimenti cancellati : "+movEliminati+ "\n Ricordarsi di Salvare per non perdere le modifiche fatte sui movimenti.";
                JOptionPane.showOptionDialog(this,Messaggio, "Cancellazione Transazioni Crypto", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"OK"}, "OK");
                }
           }
           
                }
            }
        }else
           {
            JOptionPane.showConfirmDialog(this, "Attenzione! \nDevi selezionare un Wallet per poterlo eliminare",
                            "Nessun Wallet selezionato",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);    
           }          
    }//GEN-LAST:event_Bottone_RimuoviWalletActionPerformed

    private void Bottone_AggiornaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AggiornaActionPerformed
        // TODO add your handling code here:
        AggiornaWallets();
        
    }//GEN-LAST:event_Bottone_AggiornaActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
       // TransazioniCrypto_Funzioni_AggiornaPlusvalenze();
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
   /*     try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestioneWallets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestioneWallets().setVisible(true);
            }
        });
    }

    
    public static void LeggiFileWallets(){
         try {
             //Il file wallet è così composto
             //IndirizzoWallet;Rete;
             //la mappa che andrò a generare invece sarà
             //key:IndirizzoWallet_Rete
             //Dati:IndirizzoWallet;Rete
             File file=new File ("Wallets.db");
             if (!file.exists()) file.createNewFile();
             String riga;
             try (FileReader fire = new FileReader("Wallets.db");
                     BufferedReader bure = new BufferedReader(fire);)
             {
                 while((riga=bure.readLine())!=null)
                 {
                     String rigaSplittata[]=riga.split(";");
                     if (rigaSplittata.length==2)
                     {
                         MappaWallets.put(rigaSplittata[0]+"_"+rigaSplittata[1], riga);
                     }
                 }
                // bure.close();
                // fire.close();        
             } catch (FileNotFoundException ex) {
                 Logger.getLogger(Prezzi.class.getName()).log(Level.SEVERE, null, ex);
             } catch (IOException ex) {
                 Logger.getLogger(Prezzi.class.getName()).log(Level.SEVERE, null, ex);
             }

         } catch (IOException ex) {        
            Logger.getLogger(Prezzi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    
    static void ScriviFileWallets() {
   try { 
       FileWriter w=new FileWriter("Wallets.db");
       BufferedWriter b=new BufferedWriter (w);
       for (String k:MappaWallets.values()){
           b.write(k+"\n");
       }
       b.close();
       w.close();

    }catch (IOException ex) {
                 //  Logger.getLogger(AWS.class.getName()).log(Level.SEVERE, null, ex);
               }
   
   }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bottone_Aggiorna;
    private javax.swing.JButton Bottone_InserisciWallet;
    private javax.swing.JButton Bottone_RimuoviWallet;
    private javax.swing.JComboBox<String> ComboBox_Rete;
    private javax.swing.JLabel Label_IndirizzoWallet;
    private javax.swing.JLabel Label_Rete;
    private javax.swing.JScrollPane ScrollPaneTabellaWallets;
    private javax.swing.JTable TabellaWallets;
    private javax.swing.JTextField TextField_IndirizzoWallet;
    // End of variables declaration//GEN-END:variables
}
