package giacenze_crypto.com;

import java.awt.Component;
import java.awt.Cursor;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author luca.passelli
 */
public class Importazioni_Gestione extends javax.swing.JDialog {

    /**
     * Creates new form Gestione_Importazioni
     */
    static String Exchanges[]=new String[]{"----------",
    "Abra","Acx","AscendEX","BSDEX","BTC Markets","BTCPay Bybit",
    "BYDFI","Binance","Binance US","Bison","Bitcoin Suisse","Bitcoin.de",
    "Bitfinex","Bithumb Glo.","Bitpanda","Bitpanda Pro","Bitrue","Bitstamp",
    "Bittrex","BlockFi","CEX","Cake Defl","Celsius","Changelly",
    "Circle","CoinEx","Coinbase","Coinbase Pro","Coinmate","Coinmerce",
    "Coinmetro","Coss","Crex24","Criptan","Crypto.com","Crypto.com Exchange",
    "DFX.swiss","Deribit","Digital Surge","Gate.lo","Gemini","HRBTC",
    "Haru","Hodinaut","Hotbit","Iconomi","Idex","Kraken",
    "KuCoin","Localbitcoins","Luxor","MEXC","Mercatox","NFTBank",
    "Nexo","Northcrypto","OKColn","OKX","Phemex","Pocket Bitcoin",
    "Poloniex","Relal","STEX","SwissBorg","Swyftx","Tradeogre",
    "Uphold","Voyager","Yield App","Zerion"};
    
    static String Wallets[]=new String[]{"----------",
    "BitBox","Citcoin Core Client","Blochchain.com","Electrum","Exodus","Gate Hub","Ledger Live","Mycellum","Trezor"};
    
    static String BlockChain[]=new String[]{"----------",
    "Avalanche (AVAX)","Cardano (ADA)","Binance Chain (BNB)","Binance Smart Chain (BSC)",
    "Cronos Chain (CRO)","Dash (DASH)","Dogecoin (DOGE)","Polkadot (DOT)","Eos (EOS)","Ethereum (ETH)",
    "Fantom (FTM)","Litecoin (LTC)","Terra Classic (LUNA)","Poligon (MATIC)","Tron (TRX)","Solana (SOL)",
    "Stellar (XLM)","Ripple (XRP)","Zcash (ZEC)"};
    
    public Importazioni_Gestione() {
         this.setTitle("Import da File");
        setModalityType(ModalityType.APPLICATION_MODAL);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Label_TipoFile = new javax.swing.JLabel();
        ComboBox_TipoFile = new javax.swing.JComboBox<>();
        Bottone_SelezionaFile = new javax.swing.JButton();
        Label_NomeExchange = new javax.swing.JLabel();
        ScrollPane_Attenzione = new javax.swing.JScrollPane();
        TextPane_Attenzione = new javax.swing.JTextPane();
        Bottone_Annulla = new javax.swing.JButton();
        CheckBox_Sovrascrivi = new javax.swing.JCheckBox();
        ComboBox_Exchanges = new javax.swing.JComboBox<>();
        Text_NomeWallet = new javax.swing.JTextField();
        Label_NomeWallet = new javax.swing.JLabel();
        ComboBox_TipoImport = new javax.swing.JComboBox<>();
        Label_TipoImport = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        Label_TipoFile.setText("Selezionare il tipo di file da importare");

        ComboBox_TipoFile.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Crypto.com App CSV", "Binance CSV", "CoinTracking.info CSV", "Tatax CSV", "OKX CSV (Alpha)" }));
        ComboBox_TipoFile.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBox_TipoFileItemStateChanged(evt);
            }
        });

        Bottone_SelezionaFile.setText("Seleziona file da importare");
        Bottone_SelezionaFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_SelezionaFileActionPerformed(evt);
            }
        });

        Label_NomeExchange.setText("Scegli il nome dell'Exchange/Wallet/Blockchain da Importare");
        Label_NomeExchange.setEnabled(false);

        TextPane_Attenzione.setEditable(false);
        TextPane_Attenzione.setContentType("text/html"); // NOI18N
        TextPane_Attenzione.setText("<html>\r\n  <head>\r\n\n  </head>\r\n  <body>\r\n    <p style=\"margin-top: 0\">\r\nATTENZIONE : <br><br>\nPer quanto riguarda le importazioni da cointracking.info<br>\nè importante importarle un solo exchange/wallet per volta<br>\ne impostare il nome dell'exchange/wallet nel campo sottostante<br><br>\nes. Binance\n    </p>\r\n  </body>\r\n</html>\r\n");
        TextPane_Attenzione.setEnabled(false);
        ScrollPane_Attenzione.setViewportView(TextPane_Attenzione);

        Bottone_Annulla.setText("Annulla");
        Bottone_Annulla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AnnullaActionPerformed(evt);
            }
        });

        CheckBox_Sovrascrivi.setText("Sovrascrivere movimenti già presenti");

        ComboBox_Exchanges.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " - nessuno -", "Abra", "Acx", "AscendEX", "BSDEX", "BTC Markets", "BTCPay Bybit", "BYDFI", "Binance", "Binance US", "Bison", "Bitcoin Suisse", "Bitcoin.de", "Bitfinex", "Bithumb Glo.", "Bitpanda", "Bitpanda Pro", "Bitrue", "Bitstamp", "Bittrex", "BlockFi", "CEX", "Cake Defl", "Celsius", "Changelly", "Circle", "CoinEx", "Coinbase", "Coinbase Pro", "Coinmate", "Coinmerce", "Coinmetro", "Coss", "Crex24", "Criptan", "Crypto.com", "Crypto.com Exchange", "DFX.swiss", "Deribit", "Digital Surge", "Gate.lo", "Gemini", "HRBTC", "Haru", "Hodinaut", "Hotbit", "Iconomi", "Idex", "Kraken", "KuCoin", "Localbitcoins", "Luxor", "MEXC", "Mercatox", "NFTBank", "Nexo", "Northcrypto", "OKColn", "OKX", "Phemex", "Pocket Bitcoin", "Poloniex", "Relal", "STEX", "SwissBorg", "Swyftx", "Tradeogre", "Uphold", "Voyager", "Yield App ", "Zerion" }));
        ComboBox_Exchanges.setEnabled(false);
        ComboBox_Exchanges.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBox_ExchangesItemStateChanged(evt);
            }
        });

        Text_NomeWallet.setEnabled(false);
        Text_NomeWallet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Text_NomeWalletKeyReleased(evt);
            }
        });

        Label_NomeWallet.setText("Indicare nome o indirizzo del Wallet");
        Label_NomeWallet.setEnabled(false);

        ComboBox_TipoImport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "------------", "Exchange", "Wallet", "Transazioni Blockchain" }));
        ComboBox_TipoImport.setEnabled(false);
        ComboBox_TipoImport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBox_TipoImportItemStateChanged(evt);
            }
        });

        Label_TipoImport.setText("Scegliere che cosa si vuole importare");
        Label_TipoImport.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_TipoFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ComboBox_TipoFile, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label_NomeExchange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ScrollPane_Attenzione)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Bottone_SelezionaFile, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Bottone_Annulla))
                            .addComponent(CheckBox_Sovrascrivi)
                            .addComponent(ComboBox_Exchanges, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Text_NomeWallet)
                            .addComponent(Label_NomeWallet, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboBox_TipoImport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label_TipoImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Label_TipoFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBox_TipoFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckBox_Sovrascrivi)
                .addGap(39, 39, 39)
                .addComponent(ScrollPane_Attenzione, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Label_TipoImport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ComboBox_TipoImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_NomeExchange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBox_Exchanges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_NomeWallet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Text_NomeWallet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bottone_SelezionaFile)
                    .addComponent(Bottone_Annulla))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBox_TipoFileItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBox_TipoFileItemStateChanged
        // TODO add your handling code here:
        if (ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().equalsIgnoreCase("CoinTracking.info CSV")||
            ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().equalsIgnoreCase("Tatax CSV"))
        {
            Label_TipoImport.setEnabled(true);
            ComboBox_TipoImport.setEnabled(true);
            TextPane_Attenzione.setEnabled(true);
            ComboBox_TipoImport.setSelectedIndex(0);
            Bottone_SelezionaFile.setEnabled(false);
     
            
           /* ArrayList<String> elements = new ArrayList<String>();
            elements.addAll(java.util.Arrays.asList(Exchanges));
            ComboBoxModel model = new DefaultComboBoxModel(elements.toArray());
            ComboBox_TipoImport.setModel(model);*/

        }
        else
          {
              
            Label_NomeExchange.setEnabled(false);
            Label_TipoImport.setEnabled(false);
            Label_NomeExchange.setEnabled(false);
            ComboBox_Exchanges.setEnabled(false);
            ComboBox_TipoImport.setEnabled(false);
            this.Text_NomeWallet.setEnabled(false);
            TextPane_Attenzione.setEnabled(false);
            Bottone_SelezionaFile.setEnabled(true);


          }  
    }//GEN-LAST:event_ComboBox_TipoFileItemStateChanged

    private void Bottone_AnnullaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AnnullaActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_Bottone_AnnullaActionPerformed
   
    
    
    private void Bottone_SelezionaFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_SelezionaFileActionPerformed

       // boolean selezioneok[]=new boolean[]{false};
       //this.setCursor(Cursor.WAIT_CURSOR);
        if (ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().equalsIgnoreCase("Crypto.com APP Csv")) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            String Directory = DatabaseH2.Pers_Opzioni_Leggi("Directory_ImportazioniGestione");
            JFileChooser fc = new JFileChooser(Directory);
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
             //   selezioneok[0]=true;
                String FileDaImportare = fc.getSelectedFile().getAbsolutePath();
                DatabaseH2.Pers_Opzioni_Scrivi("Directory_ImportazioniGestione", fc.getSelectedFile().getParent());
                System.out.println(Directory);
                boolean SovrascriEsistenti = this.CheckBox_Sovrascrivi.isSelected();
                Importazioni.AzzeraContatori();
                Importazioni.Importa_Crypto_CDCApp(FileDaImportare, SovrascriEsistenti);
                Importazioni_Resoconto res = new Importazioni_Resoconto();
                res.ImpostaValori(Importazioni.Transazioni, Importazioni.TransazioniAggiunte, Importazioni.TrasazioniScartate, Importazioni.TrasazioniSconosciute, Importazioni.movimentiSconosciuti);
                res.setLocationRelativeTo(this);
                res.setVisible(true);
                dispose();
            }
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } 
        
        else if (ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().toUpperCase().contains("COINTRACKING")) {

            Component c = this;
            Download progressb = new Download();
            Bottone_SelezionaFile.setEnabled(false);
            Bottone_Annulla.setEnabled(false);
            String Directory = DatabaseH2.Pers_Opzioni_Leggi("Directory_ImportazioniGestione");
            JFileChooser fc = new JFileChooser(Directory);
            int returnVal = fc.showOpenDialog(c);

            Thread thread;
            thread = new Thread() {
                public void run() {
                  //  try {

                        if (returnVal == JFileChooser.APPROVE_OPTION) {
                       //     selezioneok[0] = true;
                            String FileDaImportare = fc.getSelectedFile().getAbsolutePath();
                            DatabaseH2.Pers_Opzioni_Scrivi("Directory_ImportazioniGestione", fc.getSelectedFile().getParent());
                            boolean SovrascriEsistenti = CheckBox_Sovrascrivi.isSelected();
                            Importazioni.AzzeraContatori();
                            String nomewallet;
                            boolean PrezzoZero = false;
                            if (ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Transazioni Blockchain")) {
                                nomewallet = Text_NomeWallet.getText().trim() + " " + ComboBox_Exchanges.getSelectedItem().toString().trim().substring(ComboBox_Exchanges.getSelectedItem().toString().indexOf("("), ComboBox_Exchanges.getSelectedItem().toString().indexOf(")") + 1);
                                //in questo caso siccome cointracking sbaglia molto spesso i prezzi delle shitcoin imposto il prezzo a zero
                                //su tutti gli scambi nel caso in cui binance non abbia i prezi corretti
                                PrezzoZero = true;
                                //System.out.println(nomewallet);
                            } else {
                                nomewallet = ComboBox_Exchanges.getSelectedItem().toString().trim();
                            }
                            Importazioni.Importa_Crypto_CoinTracking(FileDaImportare, SovrascriEsistenti, nomewallet, c, PrezzoZero, progressb);

                            Importazioni_Resoconto res = new Importazioni_Resoconto();
                            res.ImpostaValori(Importazioni.Transazioni, Importazioni.TransazioniAggiunte, Importazioni.TrasazioniScartate, Importazioni.TrasazioniSconosciute, Importazioni.movimentiSconosciuti);
                            res.setLocationRelativeTo(c);
                            res.setVisible(true);

                         //   if (selezioneok[0]) {
                                dispose();
                          //  }
                        }
                        Bottone_SelezionaFile.setEnabled(true);
                        Bottone_Annulla.setEnabled(true);
                        progressb.dispose();

                 /*   } catch (Exception ex) {
                        //Logger.getLogger(FramePrincipale.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println(ex);
                        java.util.logging.Logger.getLogger(Importazioni_Gestione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }*/
                }

            };
            progressb.SetThread(thread);
            thread.start();
            progressb.setDefaultCloseOperation(0);
            progressb.setLocationRelativeTo(this);
            progressb.setVisible(true);
            /* else {

                //QUA Devo gestire il joptionpane che mi avvisa di scegliere un exchange dalla lista
                //Poi devo anche gestire la corretta importazione del nome dell'exchange
                JOptionPane.showInternalConfirmDialog(null, "Attenzione, non è stata fatta nessuna scelta dal menù a tendina",
                            "Attenzione",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null);
                
                

            }*/


        }
                else if (ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().toUpperCase().contains("TATAX")) {

            Component c = this;
            Download progressb = new Download();
            Bottone_SelezionaFile.setEnabled(false);
            Bottone_Annulla.setEnabled(false);
            String Directory = DatabaseH2.Pers_Opzioni_Leggi("Directory_ImportazioniGestione");
            JFileChooser fc = new JFileChooser(Directory);
            int returnVal = fc.showOpenDialog(c);

            Thread thread;
            thread = new Thread() {
                public void run() {
                  //  try {

                        if (returnVal == JFileChooser.APPROVE_OPTION) {
                       //     selezioneok[0] = true;
                            String FileDaImportare = fc.getSelectedFile().getAbsolutePath();
                            DatabaseH2.Pers_Opzioni_Scrivi("Directory_ImportazioniGestione", fc.getSelectedFile().getParent());
                            boolean SovrascriEsistenti = CheckBox_Sovrascrivi.isSelected();
                            Importazioni.AzzeraContatori();
                            String nomewallet;
                            boolean PrezzoZero = false;
                            if (ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Transazioni Blockchain")) {
                                nomewallet = Text_NomeWallet.getText().trim() + " " + ComboBox_Exchanges.getSelectedItem().toString().trim().substring(ComboBox_Exchanges.getSelectedItem().toString().indexOf("("), ComboBox_Exchanges.getSelectedItem().toString().indexOf(")") + 1);
                                //in questo caso siccome cointracking sbaglia molto spesso i prezzi delle shitcoin imposto il prezzo a zero
                                //su tutti gli scambi nel caso in cui binance non abbia i prezi corretti
                                PrezzoZero = true;
                                //System.out.println(nomewallet);
                            } else {
                                nomewallet = ComboBox_Exchanges.getSelectedItem().toString().trim();
                            }
              //  progressb.RipristinaStdout();
                            Importazioni.Importa_Crypto_Tatax(FileDaImportare, SovrascriEsistenti, nomewallet, c, PrezzoZero, progressb);

                            Importazioni_Resoconto res = new Importazioni_Resoconto();
                            res.ImpostaValori(Importazioni.Transazioni, Importazioni.TransazioniAggiunte, Importazioni.TrasazioniScartate, Importazioni.TrasazioniSconosciute, Importazioni.movimentiSconosciuti);
                            res.setLocationRelativeTo(c);
                            res.setVisible(true);

                         //   if (selezioneok[0]) {
                            progressb.RipristinaStdout();
                            dispose();
                          //  }
                        }
                        Bottone_SelezionaFile.setEnabled(true);
                        Bottone_Annulla.setEnabled(true);
                        progressb.dispose();

                 /*   } catch (Exception ex) {
                        //Logger.getLogger(FramePrincipale.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println(ex);
                        java.util.logging.Logger.getLogger(Importazioni_Gestione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }*/
                }

            };
            progressb.SetThread(thread);
            thread.start();
            progressb.setDefaultCloseOperation(0);
            progressb.setLocationRelativeTo(this);
            progressb.setVisible(true);
            /* else {

                //QUA Devo gestire il joptionpane che mi avvisa di scegliere un exchange dalla lista
                //Poi devo anche gestire la corretta importazione del nome dell'exchange
                JOptionPane.showInternalConfirmDialog(null, "Attenzione, non è stata fatta nessuna scelta dal menù a tendina",
                            "Attenzione",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null);
                
                

            }*/


        }
        else if (ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().equalsIgnoreCase("Binance CSV")) {
            Component c = this;
            Download progressb = new Download();
            Bottone_SelezionaFile.setEnabled(false);
            Bottone_Annulla.setEnabled(false);
            String Directory = DatabaseH2.Pers_Opzioni_Leggi("Directory_ImportazioniGestione");
            JFileChooser fc = new JFileChooser(Directory);
            int returnVal = fc.showOpenDialog(c);
            boolean SovrascriEsistenti = this.CheckBox_Sovrascrivi.isSelected();
            Thread thread;
            thread = new Thread() {
                public void run() {

                    // JFileChooser fc = new JFileChooser();
                    // int returnVal = fc.showOpenDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                      //  selezioneok[0] = true;
                        String FileDaImportare = fc.getSelectedFile().getAbsolutePath();
                        DatabaseH2.Pers_Opzioni_Scrivi("Directory_ImportazioniGestione", fc.getSelectedFile().getParent());
                        c.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        Importazioni.AzzeraContatori();
                        Importazioni.Importa_Crypto_Binance(FileDaImportare, SovrascriEsistenti, c, progressb);
                        Importazioni_Resoconto res = new Importazioni_Resoconto();
                        c.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        res.ImpostaValori(Importazioni.Transazioni, Importazioni.TransazioniAggiunte, Importazioni.TrasazioniScartate, Importazioni.TrasazioniSconosciute, Importazioni.movimentiSconosciuti);
                        res.setLocationRelativeTo(c);
                        res.setVisible(true);
                      //  if (selezioneok[0]) {
                            dispose();
                       // }

                    }
                    Bottone_SelezionaFile.setEnabled(true);
                    Bottone_Annulla.setEnabled(true);
                    progressb.dispose();

                }

            };
            thread.start();
            progressb.setDefaultCloseOperation(0);
            progressb.setLocationRelativeTo(this);
            progressb.setVisible(true);
        } 
        
        else if (ComboBox_TipoFile.getItemAt(ComboBox_TipoFile.getSelectedIndex()).trim().contains("OKX CSV")) {
            Component c = this;
            Download progressb = new Download();
            Bottone_SelezionaFile.setEnabled(false);
            Bottone_Annulla.setEnabled(false);
            String Directory = DatabaseH2.Pers_Opzioni_Leggi("Directory_ImportazioniGestione");
            JFileChooser fc = new JFileChooser(Directory);
            int returnVal = fc.showOpenDialog(c);
            boolean SovrascriEsistenti = this.CheckBox_Sovrascrivi.isSelected();
            Thread thread;
            thread = new Thread() {
                public void run() {

                    // JFileChooser fc = new JFileChooser();
                    // int returnVal = fc.showOpenDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                      //  selezioneok[0] = true;
                        String FileDaImportare = fc.getSelectedFile().getAbsolutePath();
                        DatabaseH2.Pers_Opzioni_Scrivi("Directory_ImportazioniGestione", fc.getSelectedFile().getParent());
                        c.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        Importazioni.AzzeraContatori();
                        Importazioni.Importa_Crypto_OKX(FileDaImportare, SovrascriEsistenti, c, progressb);
                        Importazioni_Resoconto res = new Importazioni_Resoconto();
                        c.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        res.ImpostaValori(Importazioni.Transazioni, Importazioni.TransazioniAggiunte, Importazioni.TrasazioniScartate, Importazioni.TrasazioniSconosciute, Importazioni.movimentiSconosciuti);
                        res.setLocationRelativeTo(c);
                        res.setVisible(true);
                      //  if (selezioneok[0]) {
                            dispose();
                       // }

                    }
                    Bottone_SelezionaFile.setEnabled(true);
                    Bottone_Annulla.setEnabled(true);
                    progressb.dispose();

                }

            };
            thread.start();
            progressb.setDefaultCloseOperation(0);
            progressb.setLocationRelativeTo(this);
            progressb.setVisible(true);
        }
    }//GEN-LAST:event_Bottone_SelezionaFileActionPerformed

    private void ComboBox_TipoImportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBox_TipoImportItemStateChanged
        // TODO add your handling code here:
        if (ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Exchange"))
        {
            Label_TipoImport.setEnabled(true);
            ComboBox_TipoImport.setEnabled(true);
            TextPane_Attenzione.setEnabled(true);
            ComboBox_Exchanges.setEnabled(true);
            Label_NomeExchange.setEnabled(true);
            
            ArrayList<String> elements = new ArrayList<String>();
            elements.addAll(java.util.Arrays.asList(Exchanges));
            ComboBoxModel model = new DefaultComboBoxModel(elements.toArray());
            ComboBox_Exchanges.setModel(model);
            Bottone_SelezionaFile.setEnabled(false);

        }else if (ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Wallet"))
        {
            Label_TipoImport.setEnabled(true);
            ComboBox_TipoImport.setEnabled(true);
            TextPane_Attenzione.setEnabled(true);
            ComboBox_Exchanges.setEnabled(true);
            Label_NomeExchange.setEnabled(true);
            ArrayList<String> elements = new ArrayList<String>();
            elements.addAll(java.util.Arrays.asList(Wallets));
            ComboBoxModel model = new DefaultComboBoxModel(elements.toArray());
            ComboBox_Exchanges.setModel(model);
            Bottone_SelezionaFile.setEnabled(false);

        }else if (ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Transazioni BlockChain"))
        {
            Label_TipoImport.setEnabled(true);
            ComboBox_TipoImport.setEnabled(true);
            TextPane_Attenzione.setEnabled(true);
            ComboBox_Exchanges.setEnabled(true);
            Label_NomeExchange.setEnabled(true);
            ArrayList<String> elements = new ArrayList<String>();
            elements.addAll(java.util.Arrays.asList(BlockChain));
            ComboBoxModel model = new DefaultComboBoxModel(elements.toArray());
            ComboBox_Exchanges.setModel(model);
            Bottone_SelezionaFile.setEnabled(false);

        }
        else
          {
            Label_NomeExchange.setEnabled(false);
            Label_NomeExchange.setEnabled(false);
            ComboBox_Exchanges.setEnabled(false);
            Text_NomeWallet.setEnabled(false);
            Bottone_SelezionaFile.setEnabled(false);


          }  

    }//GEN-LAST:event_ComboBox_TipoImportItemStateChanged

    private void ComboBox_ExchangesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBox_ExchangesItemStateChanged
        // TODO add your handling code here:
        if ((ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Exchange")||
                ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Wallet"))&&
                !ComboBox_Exchanges.getSelectedItem().toString().trim().equalsIgnoreCase("----------"))
        {
            Bottone_SelezionaFile.setEnabled(true);
            Label_NomeWallet.setEnabled(false);
            Text_NomeWallet.setEnabled(false);

        }else if (ComboBox_TipoImport.getSelectedItem().toString().trim().equalsIgnoreCase("Transazioni BlockChain")&&
                !ComboBox_Exchanges.getSelectedItem().toString().trim().equalsIgnoreCase("----------"))
        {
            Label_NomeWallet.setEnabled(true);
            Text_NomeWallet.setEnabled(true);
            Bottone_SelezionaFile.setEnabled(false);
            if (!this.Text_NomeWallet.getText().trim().equalsIgnoreCase("")) Bottone_SelezionaFile.setEnabled(true);
        
           // System.out.println("ss");

        }
        else
          {
            Bottone_SelezionaFile.setEnabled(false);
            Label_NomeWallet.setEnabled(false);
            Text_NomeWallet.setEnabled(false);
          //  System.out.println("hh");
          }  
    }//GEN-LAST:event_ComboBox_ExchangesItemStateChanged

    private void Text_NomeWalletKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_NomeWalletKeyReleased
        // TODO add your handling code here:
        if (!this.Text_NomeWallet.getText().trim().equalsIgnoreCase(""))
            Bottone_SelezionaFile.setEnabled(true);
    }//GEN-LAST:event_Text_NomeWalletKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Importazioni_Gestione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Importazioni_Gestione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Importazioni_Gestione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Importazioni_Gestione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Importazioni_Gestione().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bottone_Annulla;
    private javax.swing.JButton Bottone_SelezionaFile;
    private javax.swing.JCheckBox CheckBox_Sovrascrivi;
    private javax.swing.JComboBox<String> ComboBox_Exchanges;
    private javax.swing.JComboBox<String> ComboBox_TipoFile;
    private javax.swing.JComboBox<String> ComboBox_TipoImport;
    private javax.swing.JLabel Label_NomeExchange;
    private javax.swing.JLabel Label_NomeWallet;
    private javax.swing.JLabel Label_TipoFile;
    private javax.swing.JLabel Label_TipoImport;
    private javax.swing.JScrollPane ScrollPane_Attenzione;
    private javax.swing.JTextPane TextPane_Attenzione;
    private javax.swing.JTextField Text_NomeWallet;
    // End of variables declaration//GEN-END:variables
}
