/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/*
NOTE:
Attualmente la ricerca del prezzo con il tasto in basso avviene solo dal nome della coin e solo tramite binance
Questo comporta 2 cose:
1 - Se la coin non è listata da binance di conseguenza non avrà nessun prezzo
2 - Potrebbero esserci in defi delle coin con lo stesso nome di quelle ufficiali ma con prezzi differenti, in questo caso mi restituirà un prezzo errato
*/

package giacenze_crypto.com;


import static giacenze_crypto.com.CDC_Grafica.MappaCryptoWallet;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author luca.passelli
 */
public class MovimentoManuale_GUI extends javax.swing.JDialog {

    /**
     * Creates new form MovimentoManuale_GUI
     */
    Map<String, List<String>> Wallets_e_Dettagli = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
    List<String> Lista_Cryptovalute = new ArrayList<>();
    List<String> Lista_NFT = new ArrayList<>();
    List<String> Lista_FIAT = new ArrayList<>();
    boolean ModificaMovimento=false;
    String MovimentoRiportato[]=new String[Importazioni.ColonneTabella];
    String MonetaE="";
    String MonetaU="";
    String MonetaETipo="";
    String MonetaUTipo="";
    String MonetaEQta="";
    String MonetaUQta="";
    String ValoreTransazione="";
    String Wallet="";
    String WalletDettaglio="";
    String TipoMovimentoAM="M";//M se è un movimento inserito a mano, A se deriva da importazioni
    long DataLong=0;
    
    public MovimentoManuale_GUI() {
        setModalityType(ModalityType.APPLICATION_MODAL);
        initComponents();
        
        //questo serve affinchè succeda qualcosa quando scrivo nei combobox
         MonetaUscita_ComboBox.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                FiltraItemsComboBoxMonete(MonetaUscita_ComboBox,MonetaUscita_ComboBox.getEditor().getItem().toString(),MonetaUscitaTipo_ComboBox,true);
            }
        });
         MonetaEntrata_ComboBox.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                FiltraItemsComboBoxMonete(MonetaEntrata_ComboBox,MonetaEntrata_ComboBox.getEditor().getItem().toString(),MonetaEntrataTipo_ComboBox,true);
            }
        });
                 
        this.setTitle("Inserimento Manuale Movimenti");
        ImageIcon icon = new ImageIcon("logo.png");
        this.setIconImage(icon.getImage());
        //adesso recupero i vari wallet dalla lista e li metto nella combobox
        CreaMappeXComboBox();
        CompilaComboBoxWallet();
        //Compilo la mappa delle FIAT
        //Compilo la mappa delle Crypto
        //Compilo la mappa degli NFT
        
        
        //ora lancio EvidenziaProblemi che mi colora di giallo le parti da compilare
        EvidenziaProblemi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ID_Label = new javax.swing.JLabel();
        Data_Label = new javax.swing.JLabel();
        Data_Datachooser = new com.toedter.calendar.JDateChooser();
        Ora_Label = new javax.swing.JLabel();
        Ora_ComboBox = new javax.swing.JComboBox<>();
        Minuto_Label = new javax.swing.JLabel();
        Minuto_ComboBox = new javax.swing.JComboBox<>();
        MonetaUscita_Label = new javax.swing.JLabel();
        MonetaEntrata_Label = new javax.swing.JLabel();
        MonetaUscitaTipo_Label = new javax.swing.JLabel();
        MonetaEntrataTipo_Label = new javax.swing.JLabel();
        MonetaEntrataTipo_ComboBox = new javax.swing.JComboBox<>();
        MonetaUscitaTipo_ComboBox = new javax.swing.JComboBox<>();
        MonetaUscitaQuantita_Label = new javax.swing.JLabel();
        MonetaUscitaQuantita_TextField = new javax.swing.JTextField();
        MonetaEntrataQuantita_Label = new javax.swing.JLabel();
        MonetaEntrataQuantita_TextField = new javax.swing.JTextField();
        Freccia1_Label = new javax.swing.JLabel();
        Freccia2_Label = new javax.swing.JLabel();
        Freccia3_Label = new javax.swing.JLabel();
        Note_Label = new javax.swing.JLabel();
        Note_ScrollPane = new javax.swing.JScrollPane();
        Note_TextArea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        ValoreTransazione_Label = new javax.swing.JLabel();
        ValoreTransazione_TextField = new javax.swing.JTextField();
        Bottone_CalcolaAutomaticamente = new javax.swing.JButton();
        Bottone_Ok = new javax.swing.JButton();
        Bottone_Annulla = new javax.swing.JButton();
        ID_TextField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        Wallet_Label = new javax.swing.JLabel();
        WalletDettaglio_Label = new javax.swing.JLabel();
        Wallet_ComboBox = new javax.swing.JComboBox<>();
        WalletDettaglio_ComboBox = new javax.swing.JComboBox<>();
        Secondo_Label = new javax.swing.JLabel();
        Secondo_ComboBox = new javax.swing.JComboBox<>();
        MonetaUscita_ComboBox = new javax.swing.JComboBox<>();
        MonetaEntrata_ComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ID_Label.setText("ID Transazione : ");

        Data_Label.setText("Data : ");

        Data_Datachooser.setDateFormatString("dd/MM/yyyy");
        Data_Datachooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Data_DatachooserPropertyChange(evt);
            }
        });

        Ora_Label.setText("Ora :");

        Ora_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        Ora_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Ora_ComboBoxItemStateChanged(evt);
            }
        });
        Ora_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ora_ComboBoxActionPerformed(evt);
            }
        });

        Minuto_Label.setText("Minuto :");

        Minuto_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        Minuto_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Minuto_ComboBoxItemStateChanged(evt);
            }
        });

        MonetaUscita_Label.setText("Moneta Uscita : ");

        MonetaEntrata_Label.setText("Moneta Entrata : ");

        MonetaUscitaTipo_Label.setText("Tipo Moneta Uscita : ");

        MonetaEntrataTipo_Label.setText("Tipo Moneta Entrata : ");

        MonetaEntrataTipo_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "Crypto", "NFT", "FIAT" }));
        MonetaEntrataTipo_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MonetaEntrataTipo_ComboBoxItemStateChanged(evt);
            }
        });

        MonetaUscitaTipo_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "Crypto", "NFT", "FIAT" }));
        MonetaUscitaTipo_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MonetaUscitaTipo_ComboBoxItemStateChanged(evt);
            }
        });

        MonetaUscitaQuantita_Label.setText("Quantità Uscita : ");

        MonetaUscitaQuantita_TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonetaUscitaQuantita_TextFieldActionPerformed(evt);
            }
        });
        MonetaUscitaQuantita_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MonetaUscitaQuantita_TextFieldKeyReleased(evt);
            }
        });

        MonetaEntrataQuantita_Label.setText("Quantità Entrata : ");

        MonetaEntrataQuantita_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MonetaEntrataQuantita_TextFieldKeyReleased(evt);
            }
        });

        Freccia1_Label.setText("->");

        Freccia2_Label.setText("->");

        Freccia3_Label.setText("->");

        Note_Label.setText("Note : ");

        Note_TextArea.setColumns(20);
        Note_TextArea.setRows(5);
        Note_ScrollPane.setViewportView(Note_TextArea);

        ValoreTransazione_Label.setText("Valore Transazione in EURO : ");

        ValoreTransazione_TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ValoreTransazione_TextFieldKeyReleased(evt);
            }
        });

        Bottone_CalcolaAutomaticamente.setText("Cerca di recuperare automaticamente il Valore della Transazione");
        Bottone_CalcolaAutomaticamente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_CalcolaAutomaticamenteActionPerformed(evt);
            }
        });

        Bottone_Ok.setText("OK");
        Bottone_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_OkActionPerformed(evt);
            }
        });

        Bottone_Annulla.setText("Annulla");
        Bottone_Annulla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AnnullaActionPerformed(evt);
            }
        });

        ID_TextField.setEnabled(false);

        Wallet_Label.setText("Exchange / Wallet : ");

        WalletDettaglio_Label.setText("Dettagli Wallet : ");

        Wallet_ComboBox.setEditable(true);
        Wallet_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Wallet_ComboBoxActionPerformed(evt);
            }
        });

        WalletDettaglio_ComboBox.setEditable(true);
        WalletDettaglio_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WalletDettaglio_ComboBoxActionPerformed(evt);
            }
        });

        Secondo_Label.setText("Secondo : ");

        Secondo_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        MonetaUscita_ComboBox.setEditable(true);
        MonetaUscita_ComboBox.setMaximumSize(new java.awt.Dimension(250, 250));
        MonetaUscita_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MonetaUscita_ComboBoxItemStateChanged(evt);
            }
        });

        MonetaEntrata_ComboBox.setEditable(true);
        MonetaEntrata_ComboBox.setMaximumSize(new java.awt.Dimension(250, 250));
        MonetaEntrata_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MonetaEntrata_ComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Bottone_Ok)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Bottone_Annulla))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ValoreTransazione_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ValoreTransazione_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Bottone_CalcolaAutomaticamente)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Note_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Note_ScrollPane)))
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(MonetaUscita_Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MonetaUscita_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addComponent(Data_Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Data_Datachooser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(61, 61, 61)
                                        .addComponent(Ora_Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Ora_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addComponent(MonetaUscitaQuantita_Label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MonetaUscitaQuantita_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(MonetaUscitaTipo_Label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MonetaUscitaTipo_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 100, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(Minuto_Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Minuto_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)
                                        .addComponent(Secondo_Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Secondo_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Freccia3_Label)
                                            .addComponent(Freccia2_Label)
                                            .addComponent(Freccia1_Label))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(MonetaEntrataTipo_Label, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(MonetaEntrata_Label, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(MonetaEntrataQuantita_Label, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(MonetaEntrataTipo_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(MonetaEntrata_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(MonetaEntrataQuantita_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ID_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ID_TextField)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Wallet_Label)
                            .addComponent(WalletDettaglio_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Wallet_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WalletDettaglio_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ID_Label)
                    .addComponent(ID_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Data_Label)
                    .addComponent(Data_Datachooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Ora_Label)
                        .addComponent(Ora_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Minuto_Label)
                        .addComponent(Minuto_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Secondo_Label)
                        .addComponent(Secondo_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Wallet_Label)
                    .addComponent(Wallet_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WalletDettaglio_Label)
                    .addComponent(WalletDettaglio_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Freccia1_Label)
                    .addComponent(MonetaUscitaTipo_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonetaUscitaTipo_Label)
                    .addComponent(MonetaEntrataTipo_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonetaEntrataTipo_Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Freccia2_Label)
                    .addComponent(MonetaUscita_Label)
                    .addComponent(MonetaEntrata_Label)
                    .addComponent(MonetaUscita_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonetaEntrata_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MonetaEntrataQuantita_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonetaEntrataQuantita_Label)
                    .addComponent(Freccia3_Label)
                    .addComponent(MonetaUscitaQuantita_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MonetaUscitaQuantita_Label))
                .addGap(29, 29, 29)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValoreTransazione_Label)
                    .addComponent(ValoreTransazione_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Bottone_CalcolaAutomaticamente))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Note_ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Note_Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bottone_Ok)
                    .addComponent(Bottone_Annulla))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreaMappeXComboBox(){
                Wallets_e_Dettagli = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
                Lista_FIAT.add("EUR");
          for (String[] v : MappaCryptoWallet.values()) {
              //PARTE 1: Recupero Wallet e dettagli del wallet
              String WalletTemp=v[3];
              String WalletDettaglioTemp=v[4];
              if(Wallets_e_Dettagli.get(v[3])==null)
                  {
                      List<String> Lista=new ArrayList();
                      Lista.add(WalletDettaglioTemp);
                      Wallets_e_Dettagli.put(WalletTemp, Lista);
                  }
              else{
                  List<String> Lista;
                  Lista=Wallets_e_Dettagli.get(WalletTemp);
                  if (!Lista.contains(WalletDettaglioTemp))Lista.add(WalletDettaglioTemp);
              }
              //Parte 2 recupero della lista delle crypto, lista nft etc...
              String TipoUscita=v[9];
              String MonetaUscita=v[8];
              String TipoEntrata=v[12];
              String MonetaEntrata=v[11];
              //qui elenco le monete in uscita
              if (TipoUscita.equalsIgnoreCase("Crypto")){                 
                  if(!Lista_Cryptovalute.contains(MonetaUscita))Lista_Cryptovalute.add(MonetaUscita);
                 // Mappa_Cryptovalute.put(MonetaUscita, MonetaUscita);
              }else if (TipoUscita.equalsIgnoreCase("NFT")){
                  if(!Lista_NFT.contains(MonetaUscita))Lista_NFT.add(MonetaUscita);
                //  Mappa_NFT.put(MonetaUscita, MonetaUscita);
              }else if (TipoUscita.equalsIgnoreCase("FIAT")){
                  if(!Lista_FIAT.contains(MonetaUscita))Lista_FIAT.add(MonetaUscita);
                 // Mappa_FIAT.put(MonetaUscita, MonetaUscita);
              }
              //qui quelle in entrata mettendole ovviamente nella stessa mappa chemi servirà solo per avere poi l'elenco
              if (TipoEntrata.equalsIgnoreCase("Crypto")){
                  if(!Lista_Cryptovalute.contains(MonetaEntrata))Lista_Cryptovalute.add(MonetaEntrata);
                //  Mappa_Cryptovalute.put(MonetaEntrata, MonetaEntrata);
              }else if (TipoEntrata.equalsIgnoreCase("NFT")){
                  if(!Lista_NFT.contains(MonetaEntrata))Lista_NFT.add(MonetaEntrata);
                //  Mappa_NFT.put(MonetaEntrata, MonetaEntrata);
              }else if (TipoEntrata.equalsIgnoreCase("FIAT")){
                  if(!Lista_FIAT.contains(MonetaEntrata))Lista_FIAT.add(MonetaEntrata);
                //  Mappa_FIAT.put(MonetaEntrata, MonetaEntrata);
              }
              Collections.sort(Lista_Cryptovalute);
              Collections.sort(Lista_NFT);
              Collections.sort(Lista_FIAT);
          }
    }
    
 
    
        private void FiltraItemsComboBoxMonete(JComboBox combobox,String filter,JComboBox comboboxTipo,boolean apriMenu) {
        String Tipo=comboboxTipo.getSelectedItem().toString();
        List<String> Lista=new ArrayList<>();
        if (Tipo.equalsIgnoreCase("Crypto")) {
            Lista=Lista_Cryptovalute;
        } else if (Tipo.equalsIgnoreCase("NFT")) {
            Lista=Lista_NFT;
        } else if (Tipo.equalsIgnoreCase("FIAT")) {
            Lista=Lista_FIAT;
        }
        combobox.setPopupVisible(false);
        combobox.removeAllItems();
        combobox.addItem(filter);
        for (String item : Lista) {
            if (item.toLowerCase().contains(filter.toLowerCase())) {
                if(!filter.equals(item))combobox.addItem(item);
            }
        }       
        if (apriMenu)combobox.setPopupVisible(true);
    }
        
   /* private void FiltraItemsComboBoxWallet(JComboBox combobox,String filter,JComboBox comboboxTipo,boolean apriMenu) {
        String Tipo=comboboxTipo.getSelectedItem().toString();
        List<String> Lista=new ArrayList<>();
        if (Tipo.equalsIgnoreCase("Crypto")) {
            Lista=Lista_Cryptovalute;
        } else if (Tipo.equalsIgnoreCase("NFT")) {
            Lista=Lista_NFT;
        } else if (Tipo.equalsIgnoreCase("FIAT")) {
            Lista=Lista_FIAT;
        }
        combobox.setPopupVisible(false);
        combobox.removeAllItems();
        combobox.addItem(filter);
        for (String item : Lista) {
            if (item.toLowerCase().contains(filter.toLowerCase())) {
                if(!filter.equals(item))combobox.addItem(item);
            }
        }       
        if (apriMenu)combobox.setPopupVisible(true);
    }*/
    
    private void MonetaUscitaQuantita_TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonetaUscitaQuantita_TextFieldActionPerformed
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaUscitaQuantita_TextFieldActionPerformed

    private void Ora_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ora_ComboBoxActionPerformed
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_Ora_ComboBoxActionPerformed

    private void Bottone_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_OkActionPerformed
        // TODO add your handling code here:
        if(!EvidenziaProblemi()){
            //se non trovo problemi nella compilazione allora procedo con l'inserimento del movimento
            
            //prima cosa genero l'id della transazione
            String ID=CalcolaID();
            //verifico che non esista già una transazione non lo stesso id in quel caso chiedo se sovrascriverla o aggiungerla
            //per trovare l'id ovviamente devo cercarla nella mappa delle transazioni
            if(MappaCryptoWallet.get(ID)!=null && !ModificaMovimento){
              //se entro qua significa che ho già un movimento con lo stesso id 
              //adesso devo far scegliere che fare
              //la cosa più semplice per ora è inserire un messaggio in cui si chiede di cambiare l'orario
              //o qualcosa del genere
              JOptionPane.showConfirmDialog(this, "Attenzione!\nEsiste un movimento con lo stesso ID Transsazione\nProvare a modificare l'ora della transazione anche di un solo secondo per risolvere il problema",
                    "Movimento con Stesso ID",JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,null);
            }else{
              //se invece arrivo qua posso inserire il movimento nella mappa  
              ScriviMovimento(ID);
              CDC_Grafica.TabellaCryptodaAggiornare=true;
            this.dispose(); 
            }
  
            
            
        }
        
        
    }//GEN-LAST:event_Bottone_OkActionPerformed

    public void CompilaCampidaID(String IDTransazione){
        try {
            String riga[]=CDC_Grafica.MappaCryptoWallet.get(IDTransazione);
            MovimentoRiportato=riga;
            String DataOraMinutiSecondo=riga[0].split("_")[0];
            SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");
            Date d = f.parse(DataOraMinutiSecondo.substring(0,8));
            this.Data_Datachooser.setDate(d);
            this.Ora_ComboBox.setSelectedItem(DataOraMinutiSecondo.substring(8,10));
            this.Minuto_ComboBox.setSelectedItem(DataOraMinutiSecondo.substring(10,12));
            this.Secondo_ComboBox.setSelectedItem(DataOraMinutiSecondo.substring(12,14));
            this.ID_TextField.setText(riga[0]);
            this.Wallet_ComboBox.setSelectedItem(riga[3]);
            this.WalletDettaglio_ComboBox.setSelectedItem(riga[4]);
            this.MonetaUscitaTipo_ComboBox.setSelectedItem(riga[9]);
            this.MonetaUscita_ComboBox.setSelectedItem(riga[8]);
            this.MonetaUscitaQuantita_TextField.setText(riga[10]);
            this.MonetaEntrataTipo_ComboBox.setSelectedItem(riga[12]);
            this.MonetaEntrata_ComboBox.setSelectedItem(riga[11]);
            this.MonetaEntrataQuantita_TextField.setText(riga[13]);
            this.ValoreTransazione_TextField.setText(riga[15]);
            this.Note_TextArea.setText(riga[21].replace("<br>", "\n"));
            TipoMovimentoAM=riga[22];
            //System.out.println(riga[22]);
            ModificaMovimento=true;
            //Adesso se è un movimento automatico do la possibilità di variarne solo il valore in euro
            //Altrimenti potrei dare la possibilità di variare tutto ma questo dovrebbe comportare  
            //che dovrò eseguire la cancellazione del vecchio elemento e l'inserimento del nuovo con un nuovo possibile IDTransazione
            //Per ora direi che è sufficiente dare la possibilita di variare i solo valore della transazione o le note
            //quindi
            this.Data_Datachooser.setEnabled(false);
            this.Ora_ComboBox.setEnabled(false);
            this.Minuto_ComboBox.setEnabled(false);
            this.Secondo_ComboBox.setEnabled(false);
            this.ID_TextField.setEnabled(false);
            this.Wallet_ComboBox.setEnabled(false);
            this.WalletDettaglio_ComboBox.setEnabled(false);
            this.MonetaUscitaTipo_ComboBox.setEnabled(false);
            this.MonetaUscita_ComboBox.setEnabled(false);
            this.MonetaUscitaQuantita_TextField.setEnabled(false);
            this.MonetaEntrataTipo_ComboBox.setEnabled(false);
            this.MonetaEntrata_ComboBox.setEnabled(false);
            this.MonetaEntrataQuantita_TextField.setEnabled(false);
                       
            
            EvidenziaProblemi();
        } catch (ParseException ex) {
            Logger.getLogger(MovimentoManuale_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    private void MonetaUscitaQuantita_TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MonetaUscitaQuantita_TextFieldKeyReleased
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaUscitaQuantita_TextFieldKeyReleased

    private void MonetaEntrataQuantita_TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MonetaEntrataQuantita_TextFieldKeyReleased
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaEntrataQuantita_TextFieldKeyReleased

    private void ValoreTransazione_TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ValoreTransazione_TextFieldKeyReleased
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_ValoreTransazione_TextFieldKeyReleased

    private void MonetaUscitaTipo_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MonetaUscitaTipo_ComboBoxItemStateChanged
        // TODO add your handling code here:
        //Se cambio la tipologia per prima cosa carico la mappa per la combobox
       // this.CompilaComboBoxMoneteUscite();
        FiltraItemsComboBoxMonete(MonetaUscita_ComboBox,MonetaUscita_ComboBox.getEditor().getItem().toString(),MonetaUscitaTipo_ComboBox,false);
        //come seconda cosa faccio il controllo che tutto sia compilato correttamente
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaUscitaTipo_ComboBoxItemStateChanged

    private void MonetaEntrataTipo_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MonetaEntrataTipo_ComboBoxItemStateChanged
        // TODO add your handling code here:
        //this.CompilaComboBoxMoneteEntrate();
        FiltraItemsComboBoxMonete(MonetaEntrata_ComboBox,MonetaEntrata_ComboBox.getEditor().getItem().toString(),MonetaEntrataTipo_ComboBox,false);
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaEntrataTipo_ComboBoxItemStateChanged

    private void Data_DatachooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Data_DatachooserPropertyChange
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_Data_DatachooserPropertyChange

    private void Wallet_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Wallet_ComboBoxActionPerformed
        // TODO add your handling code here:
                //Se cambiano le proprietà di questo oggetto devo cambiare di conseguenza l'oggetto del dettaglio del wallet
        this.WalletDettaglio_ComboBox.removeAllItems();
        List<String> Dettagli = Wallets_e_Dettagli.get(Wallet_ComboBox.getSelectedItem().toString());
        if (Dettagli != null) {
            this.WalletDettaglio_ComboBox.addItem("");
            for (String v : Dettagli) {
                this.WalletDettaglio_ComboBox.addItem(v);
            }
        }
        EvidenziaProblemi();
    }//GEN-LAST:event_Wallet_ComboBoxActionPerformed

    private void WalletDettaglio_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalletDettaglio_ComboBoxActionPerformed
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_WalletDettaglio_ComboBoxActionPerformed

    private void Bottone_AnnullaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AnnullaActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_Bottone_AnnullaActionPerformed

    private void MonetaUscita_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MonetaUscita_ComboBoxItemStateChanged
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaUscita_ComboBoxItemStateChanged

    private void MonetaEntrata_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MonetaEntrata_ComboBoxItemStateChanged
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_MonetaEntrata_ComboBoxItemStateChanged

    private void Ora_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Ora_ComboBoxItemStateChanged
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_Ora_ComboBoxItemStateChanged

    private void Minuto_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Minuto_ComboBoxItemStateChanged
        // TODO add your handling code here:
        EvidenziaProblemi();
    }//GEN-LAST:event_Minuto_ComboBoxItemStateChanged

    private void Bottone_CalcolaAutomaticamenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_CalcolaAutomaticamenteActionPerformed
        // TODO add your handling code here:
        String ID=CalcolaID();
        String RT[]=null;
        String Rete=Funzioni.TrovaReteDaID(ID);
        //per trovare la rete devo scindere l'ID in più parti e verificarne alcune caratteristiche
        if (ModificaMovimento) {
            RT=MappaCryptoWallet.get(ID);
        }
       setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
       Moneta MonetaUscita=null;
       Moneta MonetaEntrata=null;
       if(!MonetaU.equalsIgnoreCase("")&&!MonetaUQta.equalsIgnoreCase("")&&MonetaUTipo!=null){
       MonetaUscita=new Moneta();
       MonetaUscita.Moneta=MonetaU;
       MonetaUscita.Qta=MonetaUQta;
       MonetaUscita.Tipo=MonetaUTipo;
       if(RT!=null&&RT.length>23&&!RT[26].equals("")){
           MonetaUscita.MonetaAddress=RT[26];
         //  System.out.println(MonetaUscita.MonetaAddress);
          } 
        }
       if(!MonetaE.equalsIgnoreCase("")&&!MonetaEQta.equalsIgnoreCase("")&&MonetaETipo!=null){
       MonetaEntrata=new Moneta();
       MonetaEntrata.Moneta=MonetaE;
       MonetaEntrata.Qta=MonetaEQta;
       MonetaEntrata.Tipo=MonetaETipo;
       if(RT!=null&&RT.length>23&&!RT[28].equals("")){
           MonetaEntrata.MonetaAddress=RT[28];
          // System.out.println(MonetaEntrata.MonetaAddress);
           }
        }
       
       
       String Prezzo=Prezzi.DammiPrezzoTransazione(MonetaEntrata, MonetaUscita, DataLong, "0", true, 2, Rete);
        ValoreTransazione_TextField.setText(Prezzo);
       EvidenziaProblemi();
     // System.out.println("Prezzo");
       setCursor(Cursor.getDefaultCursor());
 
    }//GEN-LAST:event_Bottone_CalcolaAutomaticamenteActionPerformed

    private void CompilaComboBoxWallet(){
        this.Wallet_ComboBox.removeAllItems();
        this.Wallet_ComboBox.addItem("");
        for (String v : Wallets_e_Dettagli.keySet()) {
              this.Wallet_ComboBox.addItem(v);
          }
    }

    private void ScriviMovimento(String ID) {
        

        //questa è la funzione che si occuperà nello specifico di scrivere il movimento in ogni sua parte nella tabella
        String Note = this.Note_TextArea.getText().replace(";", "").replace("\n", "<br>");
        ValoreTransazione = new BigDecimal(ValoreTransazione).setScale(2, RoundingMode.HALF_UP).toString();
        if (ModificaMovimento) {
            //Se sto modificando un movimento gli unici campi che posso modificare sono quelli del valore e delle note
            MovimentoRiportato[15]=ValoreTransazione;
            MovimentoRiportato[21] = Note;
        } else {
            MonetaUQta = MonetaUQta.replace("-", "");
            if (CDC_Grafica.Funzioni_isNumeric(MonetaUQta,false) && !MonetaUQta.equalsIgnoreCase("0")) {
                MonetaUQta = "-" + MonetaUQta;
            }
            MonetaEQta = MonetaEQta.replace("-", "");

            SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd ");
            String Data = f.format(Data_Datachooser.getDate())
                    + Ora_ComboBox.getSelectedItem().toString() + ":"
                    + Minuto_ComboBox.getSelectedItem().toString();

            String TipoTransazione = Importazioni.RitornaTipologiaTransazione(MonetaUTipo, MonetaETipo, 1);

            
            
            
            //come prima cosa recupero la riga della transazione originale qualora vi fosse
            String RT[];
            if (ModificaMovimento) {
                //Se sto facendo una modifica di un movimento esistente come prima cosa recupero tutte le informazioni del movimento
                RT = MappaCryptoWallet.get(ID);
                RT[15] = ValoreTransazione;
                RT[21] = Note;
            } else {
                //in alternativa creo un nuovo array di dati
                RT = new String[Importazioni.ColonneTabella];
                RT[0] = ID;
                RT[1] = Data;
                RT[2] = 1 + " di " + 1;
                RT[3] = Wallet;
                RT[4] = WalletDettaglio;
                RT[5] = TipoTransazione;
                RT[6] = (MonetaU + " -> " + MonetaE).trim();
                RT[8] = MonetaU;
                RT[9] = MonetaUTipo;
                RT[10] = MonetaUQta;
                RT[11] = MonetaE;
                RT[12] = MonetaETipo;
                RT[13] = MonetaEQta;
                RT[15] = ValoreTransazione;
                RT[21] = Note;
                RT[22] = TipoMovimentoAM;
                Importazioni.RiempiVuotiArray(RT);
                MappaCryptoWallet.put(RT[0], RT);
            }
            
        }
    }
    
    private boolean EvidenziaProblemi() {                                           
        // TODO add your handling code here:
       // System.out.println(Data_Datachooser.getDate());

        //per prima cosa sostituisco le virgole con i punti nei campi numerici
        MonetaUscitaQuantita_TextField.setText(MonetaUscitaQuantita_TextField.getText().replace(",", "."));
        //MonetaUscita_TextField.setText(MonetaUscita_TextField.getText().toUpperCase().replace(";", ""));
        MonetaEntrataQuantita_TextField.setText(MonetaEntrataQuantita_TextField.getText().replace(",", "."));
        //MonetaEntrata_TextField.setText(MonetaEntrata_TextField.getText().toUpperCase().replace(";", ""));
        ValoreTransazione_TextField.setText(ValoreTransazione_TextField.getText().replace(",", "."));
        
        //adesso leggo tutti gli oggetti e li metto in stringhe
        Date Data=this.Data_Datachooser.getDate();
        //String MonetaU=this.MonetaUscita_TextField.getText().trim();
        if (MonetaUscita_ComboBox.getSelectedItem()!=null)MonetaU=this.MonetaUscita_ComboBox.getSelectedItem().toString().replace(";", "").replace(",", "").trim();
        MonetaUQta=this.MonetaUscitaQuantita_TextField.getText().trim();
        MonetaUTipo=this.MonetaUscitaTipo_ComboBox.getSelectedItem().toString();
        //String MonetaE=this.MonetaEntrata_TextField.getText().trim();
        if (MonetaEntrata_ComboBox.getSelectedItem()!=null)MonetaE=this.MonetaEntrata_ComboBox.getSelectedItem().toString().replace(";", "").replace(",", "").trim();
        MonetaEQta=this.MonetaEntrataQuantita_TextField.getText().trim();
        MonetaETipo=this.MonetaEntrataTipo_ComboBox.getSelectedItem().toString();
        if (MonetaUTipo.equalsIgnoreCase("-----"))MonetaUTipo=null;
        if (MonetaETipo.equalsIgnoreCase("-----"))MonetaETipo=null;
        ValoreTransazione=this.ValoreTransazione_TextField.getText().trim();
        

      if (Wallet_ComboBox.getSelectedItem()!=null)Wallet=this.Wallet_ComboBox.getSelectedItem().toString().replace(";", "").replace(",", "").trim();
      if (WalletDettaglio_ComboBox.getSelectedItem()!=null)WalletDettaglio=this.WalletDettaglio_ComboBox.getSelectedItem().toString().replace(";", "").replace(",", "").trim();

        
        //adesso testo tutti i campi e vedo se manca qualcosa, in quel caso evidenzio i campi mancanti
        boolean nonCompleto=false;
        if (Wallet.equalsIgnoreCase("")){
            nonCompleto=true;
            this.Wallet_ComboBox.setBackground(Color.getHSBColor(20, 20, 20));
        }else {
            this.Wallet_ComboBox.setBackground(Color.white);
        }
        
       if (WalletDettaglio.equalsIgnoreCase("")){
            nonCompleto=true;
            this.WalletDettaglio_ComboBox.setBackground(Color.getHSBColor(20, 20, 20));
        }else {
            this.WalletDettaglio_ComboBox.setBackground(Color.white);
        }
       
        if (/*ValoreTransazione.equalsIgnoreCase("")||*/!CDC_Grafica.Funzioni_isNumeric(ValoreTransazione,false)){
            nonCompleto=true;
            this.ValoreTransazione_TextField.setBackground(Color.getHSBColor(20, 20, 20));
        }else {
            this.ValoreTransazione_TextField.setBackground(Color.white);
        }
        
        if (Data==null){
            nonCompleto=true;
            this.Data_Datachooser.setBackground(Color.orange);
        }else {
            this.Data_Datachooser.setBackground(this.getBackground());
            SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
            String DataString=f.format(Data_Datachooser.getDate())+" "+Ora_ComboBox.getSelectedItem().toString()+":"+
            Minuto_ComboBox.getSelectedItem().toString();
            DataLong=OperazioniSuDate.ConvertiDatainLongMinuto(DataString);
        }
        
        
        //in questa prima parte esamino se i blocchi sono interamente compilati o interamente vuoti
        boolean tuttoCompilatoE=false;
        boolean tuttoCompilatoU=false;
        boolean tuttoVuotoE=false;
        boolean tuttoVuotoU=false;
        if (MonetaU.equalsIgnoreCase("")&&MonetaUQta.equalsIgnoreCase("")&&MonetaUTipo==null)
            {
            tuttoVuotoU=true;
            tuttoCompilatoU=false;
            }
        if (!MonetaU.equalsIgnoreCase("")&&!MonetaUQta.equalsIgnoreCase("")&&MonetaUTipo!=null)
            {
            tuttoVuotoU=false;
            tuttoCompilatoU=true;
            }
        
        if (MonetaE.equalsIgnoreCase("")&&MonetaEQta.equalsIgnoreCase("")&&MonetaETipo==null)
            {
            tuttoVuotoE=true;
            tuttoCompilatoE=false;
            }
        if (!MonetaE.equalsIgnoreCase("")&&!MonetaEQta.equalsIgnoreCase("")&&MonetaETipo!=null)
            {
            tuttoVuotoE=false;
            tuttoCompilatoE=true;
            }
      /*  System.out.println(tuttoCompilatoU);
        System.out.println(tuttoCompilatoE);
        System.out.println(tuttoVuotoU);
        System.out.println(tuttoVuotoE);
        System.out.println(MonetaUQta);
        System.out.println(MonetaU);
        System.out.println(MonetaUTipo);
        System.out.println("----");*/
        //se trovo delle compilazioni a metà in uno dei 2 blocchi devo evidenziare il problema
        //se trovo che nessuno dei 2 blocchi è compilato devo evidenziare il problema
        //se invece le 2 situazioni di prima non sono vere vuol dire che va tutto bene

        
        //se trovo delle compilazioni a metà in uno dei 2 blocchi devo evidenziare il problema
        //oppure se trovo che nessuno dei 2 blocchi è compilato devo evidenziare il problema
        //oppure se i campi numerici non sono numerici devo evidenziare il problema
       // System.out.println(CDC_Grafica.Funzioni_isNumeric(MonetaUQta,false));
        if (((tuttoVuotoE==false&&tuttoCompilatoE==false)||(tuttoVuotoU==false&&tuttoCompilatoU==false))||
                (tuttoVuotoE==true&&tuttoVuotoU==true)||
                (!CDC_Grafica.Funzioni_isNumeric(MonetaUQta,true)||!CDC_Grafica.Funzioni_isNumeric(MonetaEQta,true))){
            nonCompleto=true;
            if (MonetaU.equalsIgnoreCase(""))MonetaUscita_ComboBox.setBackground(Color.getHSBColor(20, 20, 20));else MonetaUscita_ComboBox.setBackground(Color.white);
            if (/*MonetaUQta.equalsIgnoreCase("")||*/!CDC_Grafica.Funzioni_isNumeric(MonetaUQta,false))MonetaUscitaQuantita_TextField.setBackground(Color.getHSBColor(20, 20, 20));else MonetaUscitaQuantita_TextField.setBackground(Color.white);
            if (MonetaUTipo==null)MonetaUscitaTipo_ComboBox.setBackground(Color.getHSBColor(20, 20, 20));else MonetaUscitaTipo_ComboBox.setBackground(Color.white);
            if (MonetaE.equalsIgnoreCase(""))MonetaEntrata_ComboBox.setBackground(Color.getHSBColor(20, 20, 20));else MonetaEntrata_ComboBox.setBackground(Color.white);
            if (/*MonetaEQta.equalsIgnoreCase("")||*/!CDC_Grafica.Funzioni_isNumeric(MonetaEQta,false))MonetaEntrataQuantita_TextField.setBackground(Color.getHSBColor(20, 20, 20));else MonetaEntrataQuantita_TextField.setBackground(Color.white);
            if (MonetaETipo==null)MonetaEntrataTipo_ComboBox.setBackground(Color.getHSBColor(20, 20, 20));else MonetaEntrataTipo_ComboBox.setBackground(Color.white);
        } 
        //se invece le 2 situazioni di prima non sono vere vuol dire che va tutto bene
        else{
            MonetaUscita_ComboBox.setBackground(Color.white);
            MonetaUscitaQuantita_TextField.setBackground(Color.white);
            MonetaUscitaTipo_ComboBox.setBackground(Color.white);
            MonetaEntrata_ComboBox.setBackground(Color.white);
            MonetaEntrataQuantita_TextField.setBackground(Color.white);
            MonetaEntrataTipo_ComboBox.setBackground(Color.white);
            
            }
        
               if (!nonCompleto)Bottone_Ok.setEnabled(true);
        else Bottone_Ok.setEnabled(false);
               
    return nonCompleto;
    
    }  
    
    
    
    private String CalcolaID() {
        String ID="";
        if (Data_Datachooser.getDate()!=null)
            {
            SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");
            String Data=f.format(Data_Datachooser.getDate());
            ID=ID+Data+Ora_ComboBox.getSelectedItem().toString()+
                    Minuto_ComboBox.getSelectedItem().toString()+
                    Secondo_ComboBox.getSelectedItem().toString()+
                    "_";         
            }
        if (Wallet_ComboBox.getSelectedItem()!=null)
            ID=ID+Wallet_ComboBox.getSelectedItem().toString().replace(";", "").replace(" ", "").replace(".", "").replace(",", "").replace("_", "").trim()+".";
        
        if (WalletDettaglio_ComboBox.getSelectedItem()!=null)
            ID=ID+WalletDettaglio_ComboBox.getSelectedItem().toString().replace(";", "").replace(" ", "").replace(".", "").replace(",", "").replace("_", "").trim()+"_1_1_";
        //Adesso devo individuare la tipologia di movimento quindi possono essere le seguenti
         //TI=Trasferimento Interno
         //DC=Deposito Criptoattività
         //PC=Prelievo Criptoattività
         //DF=Deposito Fiat
         //PF=Prelievo Fiat
         //AC=Acquisto Criptoattività (con FIAT)
         //VC=Vendita Criptoattività (per FIAT)
         //SC=Scambio Criptoattività
         //RW=Staking/caschback/airdrop etc....
         //CM=Commissioni/Fees
        ID=ID+Importazioni.RitornaTipologiaTransazione(MonetaUTipo,MonetaETipo,0);
       // System.out.println(ID);
       String IDScritto=this.ID_TextField.getText();
       //se ho recuperato l'id dalla transazione tengo quello
       if (IDScritto.equalsIgnoreCase(""))
        return ID;
       else return IDScritto;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovimentoManuale_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovimentoManuale_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovimentoManuale_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovimentoManuale_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovimentoManuale_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bottone_Annulla;
    private javax.swing.JButton Bottone_CalcolaAutomaticamente;
    private javax.swing.JButton Bottone_Ok;
    private com.toedter.calendar.JDateChooser Data_Datachooser;
    private javax.swing.JLabel Data_Label;
    private javax.swing.JLabel Freccia1_Label;
    private javax.swing.JLabel Freccia2_Label;
    private javax.swing.JLabel Freccia3_Label;
    private javax.swing.JLabel ID_Label;
    private javax.swing.JTextField ID_TextField;
    private javax.swing.JComboBox<String> Minuto_ComboBox;
    private javax.swing.JLabel Minuto_Label;
    private javax.swing.JLabel MonetaEntrataQuantita_Label;
    private javax.swing.JTextField MonetaEntrataQuantita_TextField;
    private javax.swing.JComboBox<String> MonetaEntrataTipo_ComboBox;
    private javax.swing.JLabel MonetaEntrataTipo_Label;
    private javax.swing.JComboBox<String> MonetaEntrata_ComboBox;
    private javax.swing.JLabel MonetaEntrata_Label;
    private javax.swing.JLabel MonetaUscitaQuantita_Label;
    private javax.swing.JTextField MonetaUscitaQuantita_TextField;
    private javax.swing.JComboBox<String> MonetaUscitaTipo_ComboBox;
    private javax.swing.JLabel MonetaUscitaTipo_Label;
    private javax.swing.JComboBox<String> MonetaUscita_ComboBox;
    private javax.swing.JLabel MonetaUscita_Label;
    private javax.swing.JLabel Note_Label;
    private javax.swing.JScrollPane Note_ScrollPane;
    private javax.swing.JTextArea Note_TextArea;
    private javax.swing.JComboBox<String> Ora_ComboBox;
    private javax.swing.JLabel Ora_Label;
    private javax.swing.JComboBox<String> Secondo_ComboBox;
    private javax.swing.JLabel Secondo_Label;
    private javax.swing.JLabel ValoreTransazione_Label;
    private javax.swing.JTextField ValoreTransazione_TextField;
    private javax.swing.JComboBox<String> WalletDettaglio_ComboBox;
    private javax.swing.JLabel WalletDettaglio_Label;
    private javax.swing.JComboBox<String> Wallet_ComboBox;
    private javax.swing.JLabel Wallet_Label;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
