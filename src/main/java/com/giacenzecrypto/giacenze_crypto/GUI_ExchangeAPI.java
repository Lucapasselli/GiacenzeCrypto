/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.giacenzecrypto.giacenze_crypto;

import static com.giacenzecrypto.giacenze_crypto.CDC_Grafica.MappaCryptoWallet;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author luca.passelli
 */

/*
Funzioni da sistemare per aggiungere nuova rete

-> Prezzi.RecuperaCoinsCoingecko
-> Funzioni.CompilaMappaChain
-> GestioneWallets

*/
public class GUI_ExchangeAPI extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    Map<String, String> Mappa_Exchange = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
    /**
     * Creates new form GestioneWallets
     */

    
    public boolean TabellaDaAggiornare=false;
    public GUI_ExchangeAPI() {
        ImageIcon icon = new ImageIcon(Statiche.getPathRisorse()+"logo.png");
        this.setIconImage(icon.getImage());
        initComponents();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Pannello_Chiavi = new javax.swing.JPanel();
        ScrollPaneTabellaWallets = new javax.swing.JScrollPane();
        TabellaWallets = new javax.swing.JTable();
        TextField_ApiKey = new javax.swing.JTextField();
        Label_IndirizzoWallet1 = new javax.swing.JLabel();
        Label_IndirizzoWallet = new javax.swing.JLabel();
        TextField_ApiSecret = new javax.swing.JTextField();
        Label_Exchange = new javax.swing.JLabel();
        ComboBox_Exchange = new javax.swing.JComboBox<>();
        Bottone_InserisciChiave = new javax.swing.JButton();
        Bottone_RimuoviChiave = new javax.swing.JButton();
        Bottone_AggiornaSelezionati = new javax.swing.JButton();
        Bottone_Aggiorna = new javax.swing.JButton();
        Pannello_Binance = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        Binance_Tabella = new javax.swing.JTable();
        Binance_BottoneAggiungi = new javax.swing.JButton();
        Binance_BottoneRimuovi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabellaWallets.setAutoCreateRowSorter(true);
        TabellaWallets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Gruppo", "Exchange", "API Key", "API Secret", "<html><center>Data Ultimo Movimento<br>Importato</html>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPaneTabellaWallets.setViewportView(TabellaWallets);
        if (TabellaWallets.getColumnModel().getColumnCount() > 0) {
            TabellaWallets.getColumnModel().getColumn(0).setPreferredWidth(150);
            TabellaWallets.getColumnModel().getColumn(0).setMaxWidth(150);
            TabellaWallets.getColumnModel().getColumn(1).setPreferredWidth(150);
            TabellaWallets.getColumnModel().getColumn(1).setMaxWidth(150);
            TabellaWallets.getColumnModel().getColumn(4).setPreferredWidth(150);
            TabellaWallets.getColumnModel().getColumn(4).setMaxWidth(150);
        }
        TabellaWallets.getTableHeader().setPreferredSize(new Dimension(TabellaWallets.getColumnModel().getTotalColumnWidth(), 48));

        Label_IndirizzoWallet1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_IndirizzoWallet1.setText("Api Key :");

        Label_IndirizzoWallet.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_IndirizzoWallet.setText("Api Secret :");

        Label_Exchange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_Exchange.setText("Exchange :");

        ComboBox_Exchange.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- nessuna selezione ---", "Binance" }));

        Bottone_InserisciChiave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Nuovo.png"))); // NOI18N
        Bottone_InserisciChiave.setText("Inserisci Chiave");
        Bottone_InserisciChiave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_InserisciChiaveActionPerformed(evt);
            }
        });

        Bottone_RimuoviChiave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Cestino.png"))); // NOI18N
        Bottone_RimuoviChiave.setText("Rimuovi Chiave Selezionata");
        Bottone_RimuoviChiave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_RimuoviChiaveActionPerformed(evt);
            }
        });

        Bottone_AggiornaSelezionati.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Aggiorna.png"))); // NOI18N
        Bottone_AggiornaSelezionati.setText("Aggiorna Selezionati");
        Bottone_AggiornaSelezionati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AggiornaSelezionatiActionPerformed(evt);
            }
        });

        Bottone_Aggiorna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Aggiorna.png"))); // NOI18N
        Bottone_Aggiorna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AggiornaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Pannello_ChiaviLayout = new javax.swing.GroupLayout(Pannello_Chiavi);
        Pannello_Chiavi.setLayout(Pannello_ChiaviLayout);
        Pannello_ChiaviLayout.setHorizontalGroup(
            Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pannello_ChiaviLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Label_IndirizzoWallet1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Label_IndirizzoWallet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                    .addComponent(Label_Exchange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Pannello_ChiaviLayout.createSequentialGroup()
                        .addComponent(ComboBox_Exchange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(Bottone_InserisciChiave))
                    .addComponent(TextField_ApiSecret, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(TextField_ApiKey, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bottone_RimuoviChiave, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                    .addComponent(Bottone_AggiornaSelezionati, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(Bottone_Aggiorna, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Pannello_ChiaviLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(ScrollPaneTabellaWallets, javax.swing.GroupLayout.DEFAULT_SIZE, 1015, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        Pannello_ChiaviLayout.setVerticalGroup(
            Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Pannello_ChiaviLayout.createSequentialGroup()
                .addContainerGap(435, Short.MAX_VALUE)
                .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Pannello_ChiaviLayout.createSequentialGroup()
                        .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextField_ApiKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label_IndirizzoWallet1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Label_IndirizzoWallet)
                            .addComponent(TextField_ApiSecret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBox_Exchange, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bottone_InserisciChiave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label_Exchange)))
                    .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Bottone_Aggiorna, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Pannello_ChiaviLayout.createSequentialGroup()
                            .addComponent(Bottone_RimuoviChiave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Bottone_AggiornaSelezionati, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7))
            .addGroup(Pannello_ChiaviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Pannello_ChiaviLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(ScrollPaneTabellaWallets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(104, Short.MAX_VALUE)))
        );

        Bottone_Aggiorna.setText("<html>Scarica nuovi movimenti<br>da tutti i Wallet della lista</html>");

        jTabbedPane1.addTab("Chiavi API", Pannello_Chiavi);

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextPane1.setText("<div style=\"font-family: Arial, Helvetica, sans-serif; max-width:700px; padding:14px; border-radius:10px;\n            background: linear-gradient(180deg,#ffffff,#f6f9ff); border:1px solid #d6e0ff; color:#1a1a1a;\">\n  <div style=\"display:flex; align-items:center; gap:10px; margin-bottom:8px;\">\n    <div>\n      <div style=\"font-size:16px; font-weight:700; margin-bottom:2px;\">Nota su scaricamento Trades da Binance</div>\n      <div style=\"font-size:12px; color:#4b5876;\">Leggi con attenzione</div>\n    </div>\n  </div>\n\n  <p style=\"margin:10px 0; line-height:1.45;\">\n    Binance non permette di scaricare l'elenco di <strong>tutte</strong> le transazioni tramite API: è necessario specificare la <em>coppia</em> tradata.\n  </p>\n\n  <p style=\"margin:10px 0; line-height:1.45;\">\n    Questo crea un grosso problema poiché, per cercare in tutte le coppie disponibili, il programma potrebbe impiegare delle ore.<br>\n    Per ridurre i tempi vengono applicate delle logiche euristiche per individuare le coppie più probabili nel periodo analizzato, ma potrebbe comunque sfuggirne qualcuna.\n  </p>\n\n  <div style=\"background:#fbfdff; border:1px dashed #cfe3ff; padding:10px; border-radius:8px; margin:10px 0;\">\n    <strong>Come risolvere</strong>\n    <p style=\"margin:8px 0 0 0; line-height:1.4;\">\n      Nella tabella a destra puoi inserire manualmente tutti i token di cui sei sicuro di aver usato le coppie,\n      o quelli che noti manchino nell'elenco delle transazioni: al prossimo scaricamento il programma richiederà anche\n      i trades per quei token.\n    </p>\n  </div>\n\n  <p style=\"margin:10px 0; font-weight:700; color:#8a1f1f;\">Attenzione</p>\n  <p style=\"margin:4px 0 0 0; line-height:1.45;\">\n    Se devi inserire la coppia BTCUSDC dovrai effettuare <strong>2 inserimenti</strong>: uno per BTC e uno per USDC.\n  </p>\n\n  <div style=\"margin-top:12px; font-size:12px; color:#556078;\">\n    <span style=\"display:inline-block; margin-right:10px;\">✔️ Consiglio: inserisci solo token che sei sicuro di aver usato.</span><br>\n    <span style=\"display:inline-block; margin-left:14px;\">🔁 Al prossimo download verranno richiesti i trades aggiuntivi.</span>\n  </div>\n</div>\n");
        jTextPane1.setToolTipText("");
        jScrollPane1.setViewportView(jTextPane1);

        Binance_Tabella.setAutoCreateRowSorter(true);
        Binance_Tabella.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Crypto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Binance_Tabella);

        Binance_BottoneAggiungi.setText("Aggiungi");
        Binance_BottoneAggiungi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Binance_BottoneAggiungiActionPerformed(evt);
            }
        });

        Binance_BottoneRimuovi.setText("Rimuovi");
        Binance_BottoneRimuovi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Binance_BottoneRimuoviActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Pannello_BinanceLayout = new javax.swing.GroupLayout(Pannello_Binance);
        Pannello_Binance.setLayout(Pannello_BinanceLayout);
        Pannello_BinanceLayout.setHorizontalGroup(
            Pannello_BinanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pannello_BinanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Pannello_BinanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Pannello_BinanceLayout.createSequentialGroup()
                        .addComponent(Binance_BottoneAggiungi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Binance_BottoneRimuovi, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        Pannello_BinanceLayout.setVerticalGroup(
            Pannello_BinanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pannello_BinanceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Pannello_BinanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addGroup(Pannello_BinanceLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Pannello_BinanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Binance_BottoneAggiungi, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Binance_BottoneRimuovi, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("<html>Particolarita'<br>Binance</html>", Pannello_Binance);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  /*  public static boolean isValidAddress(String address,String Rete) {
        if (Rete.equalsIgnoreCase("SOL")){
           // String BASE58_REGEX = "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$";
           // return address != null && address.length() == 44 && Pattern.matches(BASE58_REGEX, address);
            return isValidSolanaAddress(address);
        }
        else{
            Pattern ETH_ADDRESS_PATTERN = Pattern.compile("^0x[a-fA-F0-9]{40}$");
            return address != null && ETH_ADDRESS_PATTERN.matcher(address).matches();
        }
    }
    
    private static boolean isValidSolanaAddress(String address) {
        try {
            byte[] decoded = Base58.decode(address);
            return decoded.length == 32; // Gli indirizzi Solana devono essere di 32 byte decodificati
        } catch (Exception e) {
            return false;
        }
    }
    */
    
    private void Bottone_InserisciChiaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_InserisciChiaveActionPerformed
        // TODO add your handling code here:
        Map<String, String[]> MappaWallets=DatabaseH2.Pers_ExchangeApi_LeggiTabella();
        String Key=TextField_ApiKey.getText().trim();
        String Segreto=TextField_ApiSecret.getText().trim();
        String Exchange=ComboBox_Exchange.getItemAt(ComboBox_Exchange.getSelectedIndex());

        if(ComboBox_Exchange.getSelectedIndex()==0){
            //non è valido la selezione della combobox
            JOptionPane.showConfirmDialog(this, "Attenzione! \nDevi selezionare un exchange",
                            "Exchange non selezionato",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null);            
        }
        else if (MappaWallets.get(Exchange)!=null){
                JOptionPane.showConfirmDialog(this, "Attenzione! \nExchange gia' prensente nella lista",
                            "Exchange gia' presente",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null);  
            }
        else if (!isValidApi(Exchange,Key,Segreto)){
                //non è un indirizzo di wallet valido
            JOptionPane.showConfirmDialog(this, "Attenzione! \nLe API specificate non sono valide",
                            "API non valide",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null);
        }
        else{
               // MappaWallets.put(Wallet+"_"+Rete, Wallet+";"+Rete);
                DatabaseH2.Pers_ExchangeApi_Scrivi(Exchange, Key,Segreto);
                System.out.println("Scrivo le Api Exchange nel Database : "+Exchange+" "+Key);
                JOptionPane.showConfirmDialog(this, "Le chiavi API fornite sono valide e sono state correttamente inserite.",
                            "Chiavi API valide",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
               // ScriviFileWallets();
                PopolaTabella();
            
        }
    }//GEN-LAST:event_Bottone_InserisciChiaveActionPerformed

    private static boolean isValidApi(String Exchange,String Key,String Secret){
        boolean valido=false;
        if (Exchange.trim().equalsIgnoreCase("Binance")){
            return Binance_testApiKeys(Key,Secret);
        }
        
        return valido;
    
    }
    
    // Firma HMAC-SHA256
    private static String hmacSHA256(String secret, String data) throws Exception {
        Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
        sha256_HMAC.init(secretKey);
        byte[] hash = sha256_HMAC.doFinal(data.getBytes(StandardCharsets.UTF_8));

        // Converti in esadecimale
        StringBuilder result = new StringBuilder();
        for (byte b : hash) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
    
    public static boolean Binance_testApiKeys(String apiKey, String secret) {
        try {
            String BASE_URL = "https://api.binance.com";
            long serverTime = Binance_getServerTime();
            long localTime = System.currentTimeMillis();
            long offset = serverTime - localTime;

            long timestamp = localTime + offset; // sincronizzato con server
            String query = "timestamp=" + URLEncoder.encode(String.valueOf(timestamp), "UTF-8");
            String signature = hmacSHA256(secret, query);
            String urlStr = BASE_URL + "/api/v3/account?" + query + "&signature=" + signature;

            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("X-MBX-APIKEY", apiKey);
            conn.setConnectTimeout(10000);
            conn.setReadTimeout(10000);

            int responseCode = conn.getResponseCode();

            if (responseCode == 200) {
                // chiavi valide
                return true;
            } else {
                try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream()))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        System.err.println(line);
                    }
                }
                return false;
            }
        } catch (Exception e) {
            System.err.println("Errore test API: " + e.getMessage());
            return false;
        }
    }

        
    
        // Legge l'orologio del server Binance
    private static long Binance_getServerTime() throws Exception {
        String BASE_URL = "https://api.binance.com";
        URL url = new URL(BASE_URL + "/api/v3/time");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setConnectTimeout(5000);
        conn.setReadTimeout(5000);

        try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                response.append(line);
            }
            // Risposta tipo: {"serverTime":1724677114351}
            String json = response.toString();
            String timeStr = json.replaceAll("\\D+",""); // estrai solo numeri
            return Long.parseLong(timeStr);
        }
    }    
        
        
    private void PopolaTabella(){
        
        

        DefaultTableModel ModelloTabellaWallets = (DefaultTableModel) TabellaWallets.getModel();
        Tabelle.Funzioni_PulisciTabella(ModelloTabellaWallets);
       // Map<String, String> MappaWallets=DatabaseH2.Pers_Wallets_LeggiTabella();
        //prima di fare il tutto dovrei scorrere tutti i miei wallet e vedere se trovo corrispondenze con quelli in tabella
        //se così è allora devo cercare la data dell'ultimo movimento e segnarlo nella tabella
        Mappa_Exchange.clear();
        for (String[] v : MappaCryptoWallet.values()) {
                    Mappa_Exchange.put(v[3], Funzioni.getOradaID(v[0]));  
        }
        //Questa sotto è la mappa dei wallet nella tabella
        for (String splittata[]:DatabaseH2.Pers_ExchangeApi_LeggiTabella().values())
        {
                String rigaTabella[]=new String[5];
                String w=splittata[0];
                rigaTabella[0]=DatabaseH2.Pers_GruppoWallet_Leggi(w);
                rigaTabella[0]=DatabaseH2.Pers_GruppoAlias_Leggi(rigaTabella[0])[1];
                rigaTabella[1]=splittata[1];
                rigaTabella[2]=splittata[2];
                rigaTabella[3]=splittata[3];
                if (Mappa_Exchange.get(w)==null){
                    rigaTabella[4]="0";
                }
                else{
                    rigaTabella[4]=Mappa_Exchange.get(w);
                }
                    
                ModelloTabellaWallets.addRow(rigaTabella);            
            }
        Binance_CaricaTabella();
    }
    
    
    
    public void ScaricaExchange(String Exchange,String ApiKey,String ApiSecret,String DataUltimoMovimento) {

            long data=Long.parseLong("1483228800000");//   01/01/2017 data di default
            if (!DataUltimoMovimento.equals("0"))
            {
                data = OperazioniSuDate.ConvertiDatainLongSecondo(DataUltimoMovimento)+1000; // 1 = seconda colonna
            }
           CcxtInterop.fetchMovimentiConBar(Exchange, ApiKey, ApiSecret, data,"",this);
        
        

    }
 

    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        PopolaTabella();
    }//GEN-LAST:event_formWindowOpened

    private void Bottone_RimuoviChiaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_RimuoviChiaveActionPerformed
        // TODO add your handling code here:
              
        
        
        if (TabellaWallets.getSelectedRow() >= 0) {
            int rigaselezionata = TabellaWallets.getRowSorter().convertRowIndexToModel(TabellaWallets.getSelectedRow());

            String Exchange = TabellaWallets.getModel().getValueAt(rigaselezionata, 1).toString();
            if (Exchange != null) {
                
                 int r= JOptionPane.showConfirmDialog(this, "Attenzione! \nSei sicuro di voler eliminare le API dell'Exchange \n"
                         + Exchange+" ?",
                            "Vuo Cancellare?",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
                if(r==0){
                DatabaseH2.Pers_ExchangeApi_Cancella(Exchange);
                PopolaTabella(); 
                }
            }
        }else
           {
            JOptionPane.showConfirmDialog(this, "Attenzione! \nDevi selezionare un rigo per poterlo eliminare",
                            "Nessuna API selezionata",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);    
           } 
                
                
                
                
    }//GEN-LAST:event_Bottone_RimuoviChiaveActionPerformed

    private void Bottone_AggiornaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AggiornaActionPerformed
        // TODO add your handling code here:
      //  AggiornaWallets(null);
       int numeroRighi=TabellaWallets.getRowCount();
        if (numeroRighi == 0) {
            return;
            }
        TableModel model = TabellaWallets.getModel();
        
        for (int i=0;i<numeroRighi;i++) {
            int modelRow = TabellaWallets.convertRowIndexToModel(i);
            String wallet = model.getValueAt(modelRow, 1).toString(); // 1 = seconda colonna
            String ApiKey = model.getValueAt(modelRow, 2).toString(); // 1 = seconda colonna
            String ApiSecret = model.getValueAt(modelRow, 3).toString(); // 1 = seconda colonna
            String DataConSecondi =model.getValueAt(modelRow, 4).toString();
            
            ScaricaExchange(wallet,ApiKey,ApiSecret,DataConSecondi);
        }
        PopolaTabella();
        
    }//GEN-LAST:event_Bottone_AggiornaActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
       // TransazioniCrypto_Funzioni_AggiornaPlusvalenze();
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowGainedFocus

    private void Bottone_AggiornaSelezionatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AggiornaSelezionatiActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = TabellaWallets.getSelectedRows();
        if (selectedRows.length == 0) {
            return;
            }
        TableModel model = TabellaWallets.getModel();
        
        for (int viewRow : selectedRows) {
            int modelRow = TabellaWallets.convertRowIndexToModel(viewRow);
            String wallet = model.getValueAt(modelRow, 1).toString(); // 1 = seconda colonna
            String ApiKey = model.getValueAt(modelRow, 2).toString(); // 1 = seconda colonna
            String ApiSecret = model.getValueAt(modelRow, 3).toString(); // 1 = seconda colonna
            String DataConSecondi =model.getValueAt(modelRow, 4).toString();
            
            ScaricaExchange(wallet,ApiKey,ApiSecret,DataConSecondi);
        }
        PopolaTabella();
     
    }//GEN-LAST:event_Bottone_AggiornaSelezionatiActionPerformed

    private void Binance_BottoneAggiungiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Binance_BottoneAggiungiActionPerformed
        String token = JOptionPane.showInputDialog(
                this,
                "Inserisci il nome del token:",
                "Nuovo Token",
                JOptionPane.PLAIN_MESSAGE
        );

        if (token != null && !token.trim().isEmpty()) {
            DatabaseH2.Pers_ExchangeTokens_Scrivi("Binance", token.trim().toUpperCase());
        }

        Binance_CaricaTabella();
    }//GEN-LAST:event_Binance_BottoneAggiungiActionPerformed

    private void Binance_BottoneRimuoviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Binance_BottoneRimuoviActionPerformed
        // TODO add your handling code here:
        if (Binance_Tabella.getSelectedRow() >= 0) {
            int righeselezionate[] = Tabelle.Funzioni_getRigheSelezionate(Binance_Tabella);
            for (int riga : righeselezionate) {
                String Token = Binance_Tabella.getModel().getValueAt(riga, 0).toString();
                DatabaseH2.Pers_ExchangeTokens_Cancella("Binance", Token);

            }

        }
        
        
        Binance_CaricaTabella();
    }//GEN-LAST:event_Binance_BottoneRimuoviActionPerformed

     private void Binance_CaricaTabella(){
         DefaultTableModel ModelloTabellaCrypto = (DefaultTableModel) Binance_Tabella.getModel();
         Tabelle.Funzioni_PulisciTabella(ModelloTabellaCrypto);
         Tabelle.ColoraTabellaSemplice(Binance_Tabella);
         List<String> lista=DatabaseH2.Pers_ExchangeTokens_LeggiTokensExchange("Binance");
         for (String item : lista) {
             System.out.println(item);
            ModelloTabellaCrypto.addRow(new Object[]{item});
            }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
   /*     try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestioneWallets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GestioneWallets().setVisible(true);
        });
    }

    
    public static void LeggiFileWallets() {

            //Il file wallet è così composto
            //IndirizzoWallet;Rete;
            //la mappa che andrò a generare invece sarà
            //key:IndirizzoWallet_Rete
            //Dati:IndirizzoWallet;Rete
            File file = new File("Wallets.db");
          /*  if (!file.exists()) {
                //Se il file non esiste adesso lo creo ma successivamente non lo farò più, i dati verranno infatti messi nel database
                file.createNewFile();
            }*/
            if (file.exists()) {
                //Se il file esiste recupero i dati e lo metto nel database
                //successivamente leggerò i dati dal database
                String riga;
                try (FileReader fire = new FileReader("Wallets.db"); BufferedReader bure = new BufferedReader(fire);) {
                    while ((riga = bure.readLine()) != null) {
                        String rigaSplittata[] = riga.split(";");
                        if (rigaSplittata.length == 2) {
                            DatabaseH2.Pers_Wallets_Scrivi(rigaSplittata[0], rigaSplittata[1]);
                        }
                    }     
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(GestioneWallets.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(GestioneWallets.class.getName()).log(Level.SEVERE, null, ex);
                }
                //A questo punto devo cancellare il file, ho salvato tutto nel database
                file.delete();

            }
            
            //Leggo i dati dal database
        //    MappaWallets=DatabaseH2.Pers_Wallets_LeggiTabella();
            

       
    }
    
    
  /*  static void ScriviFileWallets() {
   try { 
       FileWriter w=new FileWriter("Wallets.db");
       BufferedWriter b=new BufferedWriter (w);
       for (String k:MappaWallets.values()){
           b.write(k+"\n");
       }
       b.close();
       w.close();

    }catch (IOException ex) {
                 //  Logger.getLogger(AWS.class.getName()).log(Level.SEVERE, null, ex);
               }
   
   }*/
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Binance_BottoneAggiungi;
    private javax.swing.JButton Binance_BottoneRimuovi;
    private javax.swing.JTable Binance_Tabella;
    private javax.swing.JButton Bottone_Aggiorna;
    private javax.swing.JButton Bottone_AggiornaSelezionati;
    private javax.swing.JButton Bottone_InserisciChiave;
    private javax.swing.JButton Bottone_RimuoviChiave;
    private javax.swing.JComboBox<String> ComboBox_Exchange;
    private javax.swing.JLabel Label_Exchange;
    private javax.swing.JLabel Label_IndirizzoWallet;
    private javax.swing.JLabel Label_IndirizzoWallet1;
    private javax.swing.JPanel Pannello_Binance;
    private javax.swing.JPanel Pannello_Chiavi;
    private javax.swing.JScrollPane ScrollPaneTabellaWallets;
    private javax.swing.JTable TabellaWallets;
    private javax.swing.JTextField TextField_ApiKey;
    private javax.swing.JTextField TextField_ApiSecret;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
