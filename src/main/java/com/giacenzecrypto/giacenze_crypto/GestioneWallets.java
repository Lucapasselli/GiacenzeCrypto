/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.giacenzecrypto.giacenze_crypto;

import static com.giacenzecrypto.giacenze_crypto.CDC_Grafica.MappaCryptoWallet;
import static com.giacenzecrypto.giacenze_crypto.CDC_Grafica.Mappa_Wallet;
import static com.giacenzecrypto.giacenze_crypto.Prezzi.MappaWallets;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author luca.passelli
 */

/*
Funzioni da sistemare per aggiungere nuova rete

-> Prezzi.RecuperaCoinsCoingecko
-> Funzioni.CompilaMappaChain
-> GestioneWallets

*/
public class GestioneWallets extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form GestioneWallets
     */

    
    public boolean TabellaDaAggiornare=false;
    public GestioneWallets() {
        ImageIcon icon = new ImageIcon(Statiche.getPathRisorse()+"logo.png");
        this.setIconImage(icon.getImage());
        initComponents();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bottone_InserisciWallet = new javax.swing.JButton();
        Bottone_RimuoviWallet = new javax.swing.JButton();
        ScrollPaneTabellaWallets = new javax.swing.JScrollPane();
        TabellaWallets = new javax.swing.JTable();
        Label_IndirizzoWallet = new javax.swing.JLabel();
        Label_Rete = new javax.swing.JLabel();
        TextField_IndirizzoWallet = new javax.swing.JTextField();
        ComboBox_Rete = new javax.swing.JComboBox<>();
        Bottone_Aggiorna = new javax.swing.JButton();
        Bottone_AggiornaSelezionati = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Bottone_InserisciWallet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Nuovo.png"))); // NOI18N
        Bottone_InserisciWallet.setText("Inserisci Wallet");
        Bottone_InserisciWallet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_InserisciWalletActionPerformed(evt);
            }
        });

        Bottone_RimuoviWallet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Cestino.png"))); // NOI18N
        Bottone_RimuoviWallet.setText("Rimuovi Wallet Selezionato");
        Bottone_RimuoviWallet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_RimuoviWalletActionPerformed(evt);
            }
        });

        TabellaWallets.setAutoCreateRowSorter(true);
        TabellaWallets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome Wallet", "Indirizo Wallet", "Rete", "<html><center>Data Ultimo Movimento<br>Importato</html>", "Ultimo Blocco"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPaneTabellaWallets.setViewportView(TabellaWallets);
        if (TabellaWallets.getColumnModel().getColumnCount() > 0) {
            TabellaWallets.getColumnModel().getColumn(0).setPreferredWidth(150);
            TabellaWallets.getColumnModel().getColumn(0).setMaxWidth(150);
            TabellaWallets.getColumnModel().getColumn(2).setPreferredWidth(60);
            TabellaWallets.getColumnModel().getColumn(2).setMaxWidth(60);
            TabellaWallets.getColumnModel().getColumn(3).setPreferredWidth(200);
            TabellaWallets.getColumnModel().getColumn(3).setMaxWidth(200);
            TabellaWallets.getColumnModel().getColumn(4).setPreferredWidth(100);
            TabellaWallets.getColumnModel().getColumn(4).setMaxWidth(100);
        }
        TabellaWallets.getTableHeader().setPreferredSize(new Dimension(TabellaWallets.getColumnModel().getTotalColumnWidth(), 48));

        Label_IndirizzoWallet.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_IndirizzoWallet.setText("Indirizzo Wallet :");

        Label_Rete.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Label_Rete.setText("Rete :");

        ComboBox_Rete.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- nessuna selezione ---", "Arbitrum (ARB)", "Avalanche (AVAX)", "Base (BASE)", "Berachain (BERA)", "Binance Smart Chain (BSC)", "Cronos Chain (CRO)", "Ethereum (ETH)", "Solana (SOL)", " " }));

        Bottone_Aggiorna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Aggiorna.png"))); // NOI18N
        Bottone_Aggiorna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AggiornaActionPerformed(evt);
            }
        });

        Bottone_AggiornaSelezionati.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/24_Aggiorna.png"))); // NOI18N
        Bottone_AggiornaSelezionati.setText("Aggiorna Selezionati");
        Bottone_AggiornaSelezionati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bottone_AggiornaSelezionatiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPaneTabellaWallets)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Label_Rete, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ComboBox_Rete, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addComponent(Bottone_InserisciWallet))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Label_IndirizzoWallet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TextField_IndirizzoWallet, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Bottone_RimuoviWallet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Bottone_AggiornaSelezionati, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bottone_Aggiorna, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollPaneTabellaWallets, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Label_IndirizzoWallet)
                            .addComponent(TextField_IndirizzoWallet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Bottone_RimuoviWallet))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Label_Rete)
                                .addComponent(ComboBox_Rete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Bottone_InserisciWallet))
                            .addComponent(Bottone_AggiornaSelezionati, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(Bottone_Aggiorna, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        Bottone_Aggiorna.setText("<html>Scarica nuovi movimenti<br>da tutti i Wallet della lista</html>");

        pack();
    }// </editor-fold>//GEN-END:initComponents

  /*  public static boolean isValidAddress(String address,String Rete) {
        if (Rete.equalsIgnoreCase("SOL")){
           // String BASE58_REGEX = "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$";
           // return address != null && address.length() == 44 && Pattern.matches(BASE58_REGEX, address);
            return isValidSolanaAddress(address);
        }
        else{
            Pattern ETH_ADDRESS_PATTERN = Pattern.compile("^0x[a-fA-F0-9]{40}$");
            return address != null && ETH_ADDRESS_PATTERN.matcher(address).matches();
        }
    }
    
    private static boolean isValidSolanaAddress(String address) {
        try {
            byte[] decoded = Base58.decode(address);
            return decoded.length == 32; // Gli indirizzi Solana devono essere di 32 byte decodificati
        } catch (Exception e) {
            return false;
        }
    }
    */
    
    private void Bottone_InserisciWalletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_InserisciWalletActionPerformed
        // TODO add your handling code here:
        String Wallet=TextField_IndirizzoWallet.getText().trim();
        String Rete=ComboBox_Rete.getItemAt(ComboBox_Rete.getSelectedIndex());
        if (Rete.split("\\(").length>1){
            Rete=Rete.split("\\(")[1].trim().substring(0, Rete.split("\\(")[1].length()-1);
        } else {
        }
        if(ComboBox_Rete.getSelectedIndex()==0){
            //non è valido la selezione della combobox
            JOptionPane.showConfirmDialog(this, "Attenzione! \nDevi selezionare una rete valida",
                            "Rete non valida",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);            
        }
        else if (!Funzioni_WalletDeFi.isValidAddress(Wallet,Rete)){
                //non è un indirizzo di wallet valido
            JOptionPane.showConfirmDialog(this, "Attenzione! \nIl Wallet specificato non è valido",
                            "Wallet non Valido",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
        }
        else{
            //Se arrivo qui i dati sono corretti adesso devo
            //1 - Controllare se non esiste già un wallet della stessa rete con lo stesso indirizzo
            if (MappaWallets.get(Wallet+"_"+Rete)!=null){
                JOptionPane.showConfirmDialog(this, "Attenzione! \nWallet gia' prensente nella lista",
                            "Wallet gia' presente",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);  
            }
            //2 - Inserisco il wallet nella lista
            else{
                MappaWallets.put(Wallet+"_"+Rete, Wallet+";"+Rete);
                System.out.println(Wallet+"_"+Rete);
                ScriviFileWallets();
                PopolaTabella();
            }
        }
    }//GEN-LAST:event_Bottone_InserisciWalletActionPerformed

    
    private void PopolaTabella(){

        DefaultTableModel ModelloTabellaWallets = (DefaultTableModel) TabellaWallets.getModel();
        Tabelle.Funzioni_PulisciTabella(ModelloTabellaWallets);
        //prima di fare il tutto dovrei scorrere tutti i miei wallet e vedere se trovo corrispondenze con quelli in tabella
        //se così è allora devo cercare la data dell'ultimo movimento e segnarlo nella tabella
        Mappa_Wallet.clear();
        for (String[] v : MappaCryptoWallet.values()) {
            if (Funzioni.Funzioni_isNumeric(v[23], false)){
                if (Mappa_Wallet.get(v[3])!=null && Mappa_Wallet.get(v[3]).split(";").length>1){
                        int bloccoMaggiore=Integer.parseInt(Mappa_Wallet.get(v[3]).split(";")[1]);
                        int bloccoUltimaTransazione=Integer.parseInt(v[23]);
                        if(bloccoUltimaTransazione>bloccoMaggiore){
                            Mappa_Wallet.put(v[3], v[1]+";"+v[23]);
                        }                   
                }else Mappa_Wallet.put(v[3], v[1]+";"+v[23]);               
            }           
        }
        for (String riga:MappaWallets.values())
        {
                String splittata[] = riga.split(";");
                String rigaTabella[]=new String[5];
                String w=splittata[0]+" ("+splittata[1]+")";
                rigaTabella[0]=DatabaseH2.Pers_GruppoWallet_Leggi(w);
                rigaTabella[0]=DatabaseH2.Pers_GruppoAlias_Leggi(rigaTabella[0])[1];
                rigaTabella[1]=splittata[0];
                rigaTabella[2]=splittata[1];
                if (Mappa_Wallet.get(w)==null){
                    rigaTabella[3]="0";
                    rigaTabella[4]="0";
                }
                else{
                    if (Mappa_Wallet.get(w).split(";").length>1)
                    {
                    rigaTabella[3]=Mappa_Wallet.get(w).split(";")[0];
                    rigaTabella[4]=Mappa_Wallet.get(w).split(";")[1];
                    }
                }
                    
                ModelloTabellaWallets.addRow(rigaTabella);            
            }

    }
    
    
    
    public void AggiornaWallets(List<String> selezionati) {
        Component c = com.giacenzecrypto.giacenze_crypto.GestioneWallets.this;
        Download progress = new Download();
        progress.setLocationRelativeTo(this);
//progress.RipristinaStdout();


        Thread thread;
        thread = new Thread() {
            public void run() {
                int i = 0;
                List<String> Portafogli = new ArrayList<>();
                if (selezionati==null){
                for (String riga : MappaWallets.values()) {
                    String splittata[] = riga.split(";");
                    String blocco = Mappa_Wallet.get(splittata[0] + " (" + splittata[1] + ")");
                    if (blocco != null) {
                        blocco = blocco.split(";")[1];
                    } else {
                        blocco = "0";
                    }
                    //boolean retecompatibile=false;
                    for(String rete : CDC_Grafica.Mappa_ChainExplorer.keySet()){
                        if (rete.equalsIgnoreCase(splittata[1]))
                        {
                           if (selezionati==null)  {
                                Portafogli.add(splittata[0] + ";" + blocco+";"+splittata[1]);
                           }else{
                               for(String p:selezionati){
                                   if (p.equals(splittata[0])){
                                       Portafogli.add(splittata[0] + ";" + blocco+";"+splittata[1]);
                                   }
                               }
                           }
                        }
                    }
                 /*   if (splittata[1].equalsIgnoreCase("BSC")
                            ||splittata[1].equalsIgnoreCase("CRO")
                            ||splittata[1].equalsIgnoreCase("ETH")
                            ||splittata[1].equalsIgnoreCase("BASE")
                            ||splittata[1].equalsIgnoreCase("ARB")
                            ||splittata[1].equalsIgnoreCase("SOL")
                            ||splittata[1].equalsIgnoreCase("BERA")
                            ) {
                        Portafogli.add(splittata[0] + ";" + blocco+";"+splittata[1]);
                    }*/
                }
                }else{
                    Portafogli=selezionati;
                    }

                //Tutte le nuove operazioni trovat vengono messe nella mappaTransazioniDefi
                Map<String,String[]> Mappa_Wallet_Dati = new TreeMap<>();
                Map<String, TransazioneDefi> MappaTransazioniDefi = Importazioni.DeFi_RitornaTransazioni(Portafogli, c, progress);
               // System.out.println("DIM:"+MappaTransazioniDefi.size());
                if (MappaTransazioniDefi != null) {
                    //Scrivo tutte le nuove transazioni nella mappa principale
                    for (TransazioneDefi v : MappaTransazioniDefi.values()) {
                        for (String[] st : v.RitornaRigheTabella()) {
                            CDC_Grafica.Funzione_AggiornaMappaWallets(st);//questo aggiorna la tabella wallet
                            //deve essere aggiornata perchè serve per sistemare poi le giacenze dei cronos
                            Importazioni.InserisciMovimentosuMappaCryptoWallet(st[0], st);
                         //   MappaCryptoWallet.put(st[0], st);
                            i++;
                            
                            //Questa parte serve per memorizzare in una mappa tutti i wallet che hanno avuto aggiornamenti con questa funzione
                            //in questo modo posso poi andare a cercare le giacenze di fine importazione per quanbto riguarda il token di riferimento
                            //ad es. eth per base, o bnb per la binance smart chain
                            //Salto la cronoschain perchè quella viene gestita a parte
                            String WalletRete=st[3];
                            String Wallet=st[3].split("\\(")[0].trim();
                            String ReteW=Funzioni.TrovaReteDaID(st[0]);
                            String Dati[]=new String[]{Wallet,ReteW};
                            if (!ReteW.equals("CRO"))Mappa_Wallet_Dati.put(WalletRete,Dati);

                            
                        }
                    }
                    
                    //Adesso per ogni wallet coinvolto controllo le giacenze di fine importazione e sistemo in caso di discrepanze
                    //Salto la cronoschain perchè quella viene gestita a parte
                    int r= JOptionPane.showConfirmDialog(c, "Vuoi che venga controllata la giacenza del token di riferimento delle chain \n"
                         + "e in caso di differenze creato un movimento di rettifica ?",
                            "Rettifiche movimenti",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
                 
              //  System.out.println(r);
                if(r==0){
                    //System.out.println("Sistemo le giacenze");
                    for (String Dati[]:Mappa_Wallet_Dati.values()){
                         //System.out.println(Dati[0]);
                        Importazioni.DeFi_GiacenzeL1_Sistema(Dati[0], Dati[1], c, progress);
                    }}
                   // Importazioni.DeFi_GiacenzeL1_Rimanze(Portafogli,"pippo");
                 //   Prezzi.ScriviFileConversioneXXXEUR();
                    Importazioni.TransazioniAggiunte = i;
                    if (Importazioni.TransazioniAggiunte != 0) {
                        CDC_Grafica.TabellaCryptodaAggiornare = true;
                    }
                    
                }
                
                progress.dispose();

            }
        };
        progress.SetThread(thread);
        thread.start();
        progress.setVisible(true);
        //progress parte in modalità esclusiva quindi le istruzioni qua sotto non vengono eseguite fino a che la finestra non viene chiusa
        Importazioni.ConvertiScambiLPinDepositiPrelievi();
        CorreggiGiacenzeCronos();
        JOptionPane.showConfirmDialog(c, "Importazione Terminata \nSono stati inseriti " + Importazioni.TransazioniAggiunte + " nuovi movimenti",
                "Importazione Terminata", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null);
        PopolaTabella();
        c.setCursor(Cursor.getDefaultCursor());

    }
 
    private void CorreggiGiacenzeCronos() {
         Component c = this;
        Download progress = new Download();
        progress.setLocationRelativeTo(this);
                Thread thread;
        thread = new Thread() {
            public void run() {
                //Importazioni.GiacenzeCRO_Sistema("", c, progress, thread);
                        for (String v : Mappa_Wallet.keySet()) {
                            if (v.contains("(CRO)")){
                              //  System.out.println(v);
                                Importazioni.GiacenzeCRO_Sistema(v, c, progress);
                            }
            //Mappa_Wallet.put(v[3], v[1]);
        }
             //   Importazioni.GiacenzeCRO_Sistema("0x7bfa44a6dad637e8416eabe568c285cc94c7e7a7", c, progress);//da gestire il wallet
                progress.dispose();
                //in teoria dovrei trovarli e gestirli in automatico
                //in qualche variabile dovrei avere l'elenco dei wallet da cui estrarre solo quelli su rete CRO
            }
         };
        progress.SetThread(thread);
        thread.start();
        progress.setVisible(true);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        LeggiFileWallets();
        PopolaTabella();
    }//GEN-LAST:event_formWindowOpened

    private void Bottone_RimuoviWalletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_RimuoviWalletActionPerformed
        // TODO add your handling code here:
                if (TabellaWallets.getSelectedRow() >= 0) {
            int rigaselezionata = TabellaWallets.getRowSorter().convertRowIndexToModel(TabellaWallets.getSelectedRow());

            String IDWallet = TabellaWallets.getModel().getValueAt(rigaselezionata, 1).toString();
            if (IDWallet != null) {
                
                 int r= JOptionPane.showConfirmDialog(this, "Attenzione! \nSei sicuro di voler eliminare il wallet \n"
                         + IDWallet+" ?",
                            "Wallet non Valido",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,null);
                 IDWallet=IDWallet+"_"+TabellaWallets.getModel().getValueAt(rigaselezionata, 2).toString();
              //  System.out.println(r);
                if(r==0){
                MappaWallets.remove(IDWallet);
                ScriviFileWallets();
                PopolaTabella();
                String Messaggio = "Il Wallet è stato cancellato \nVuoi cancellare anche tutte le movimentazioni importate finora?";
            r=JOptionPane.showOptionDialog(this, Messaggio, "Cancellazione Transazioni Crypto", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"SI","NO"}, "OK");
           if(r==0){
               //Sicome devo mettere dei limiti di data metto l'anno 2100 come limite superiore e zero (1970) come limite inferiore
             //  long Data2100=Long.parseLong("4105615230000");
             int movEliminati=Funzioni.CancellaMovimentazioniXWallet(IDWallet.split("_")[0].trim()+" ("+IDWallet.split("_")[1].trim()+")",0,0);
             if (movEliminati>0){
                 CDC_Grafica.TabellaCryptodaAggiornare=true;
                 Messaggio="Numero movimenti cancellati : "+movEliminati+ "\n Ricordarsi di Salvare per non perdere le modifiche fatte sui movimenti.";
                JOptionPane.showOptionDialog(this,Messaggio, "Cancellazione Transazioni Crypto", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"OK"}, "OK");
                //Calcoli_Plusvalenze.AggiornaPlusvalenze();
                }
           }
           
                }
            }
        }else
           {
            JOptionPane.showConfirmDialog(this, "Attenzione! \nDevi selezionare un Wallet per poterlo eliminare",
                            "Nessun Wallet selezionato",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null);    
           }          
    }//GEN-LAST:event_Bottone_RimuoviWalletActionPerformed

    private void Bottone_AggiornaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AggiornaActionPerformed
        // TODO add your handling code here:
        AggiornaWallets(null);
        
    }//GEN-LAST:event_Bottone_AggiornaActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
       // TransazioniCrypto_Funzioni_AggiornaPlusvalenze();
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowGainedFocus

    private void Bottone_AggiornaSelezionatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bottone_AggiornaSelezionatiActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = TabellaWallets.getSelectedRows();
        if (selectedRows.length == 0) {
            //System.out.println("Nessuna riga selezionata.");
            return;
            }
        TableModel model = TabellaWallets.getModel();
        
        List<String> selezionati = new ArrayList<>();
        for (int viewRow : selectedRows) {
            int modelRow = TabellaWallets.convertRowIndexToModel(viewRow);

            String wallet = model.getValueAt(modelRow, 1).toString(); // 1 = seconda colonna
            String blocco = model.getValueAt(modelRow, 4).toString(); // 1 = seconda colonna
            String rete = model.getValueAt(modelRow, 2).toString(); // 1 = seconda colonna
            selezionati.add(wallet+";"+blocco+";"+rete);
        }
        AggiornaWallets(selezionati);
    }//GEN-LAST:event_Bottone_AggiornaSelezionatiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
   /*     try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestioneWallets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestioneWallets().setVisible(true);
            }
        });
    }

    
    public static void LeggiFileWallets(){
         try {
             //Il file wallet è così composto
             //IndirizzoWallet;Rete;
             //la mappa che andrò a generare invece sarà
             //key:IndirizzoWallet_Rete
             //Dati:IndirizzoWallet;Rete
             File file=new File ("Wallets.db");
             if (!file.exists()) file.createNewFile();
             String riga;
             try (FileReader fire = new FileReader("Wallets.db");
                     BufferedReader bure = new BufferedReader(fire);)
             {
                 while((riga=bure.readLine())!=null)
                 {
                     String rigaSplittata[]=riga.split(";");
                     if (rigaSplittata.length==2)
                     {
                         MappaWallets.put(rigaSplittata[0]+"_"+rigaSplittata[1], riga);
                     }
                 }
                // bure.close();
                // fire.close();        
             } catch (FileNotFoundException ex) {
                 Logger.getLogger(Prezzi.class.getName()).log(Level.SEVERE, null, ex);
             } catch (IOException ex) {
                 Logger.getLogger(Prezzi.class.getName()).log(Level.SEVERE, null, ex);
             }

         } catch (IOException ex) {        
            Logger.getLogger(Prezzi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    
    static void ScriviFileWallets() {
   try { 
       FileWriter w=new FileWriter("Wallets.db");
       BufferedWriter b=new BufferedWriter (w);
       for (String k:MappaWallets.values()){
           b.write(k+"\n");
       }
       b.close();
       w.close();

    }catch (IOException ex) {
                 //  Logger.getLogger(AWS.class.getName()).log(Level.SEVERE, null, ex);
               }
   
   }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bottone_Aggiorna;
    private javax.swing.JButton Bottone_AggiornaSelezionati;
    private javax.swing.JButton Bottone_InserisciWallet;
    private javax.swing.JButton Bottone_RimuoviWallet;
    private javax.swing.JComboBox<String> ComboBox_Rete;
    private javax.swing.JLabel Label_IndirizzoWallet;
    private javax.swing.JLabel Label_Rete;
    private javax.swing.JScrollPane ScrollPaneTabellaWallets;
    private javax.swing.JTable TabellaWallets;
    private javax.swing.JTextField TextField_IndirizzoWallet;
    // End of variables declaration//GEN-END:variables
}
